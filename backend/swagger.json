{
  "x-generator": "NSwag v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "CardCom API",
    "version": "11.0"
  },
  "servers": [
    {
      "url": "https://secure.cardcom.solutions/"
    }
  ],
  "paths": {
    "/api/v11/LowProfile/Create": {
      "post": {
        "tags": [
          "LowProfile"
        ],
        "summary": "Create a new Iframe \\ Redirect page",
        "description": "Create iframe redirect page to charge the customer ",
        "operationId": "LowProfile_Create",
        "requestBody": {
          "x-name": "CreateLowProfile",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateLowProfile"
                  }
                ]
              },
              "examples": {
                "Charge and Create Doc": {
                  "description": "",
                  "value": {
                    "TerminalNumber": 1000,
                    "ApiName": "MyApiDemo",
                    "ReturnValue": "Z12332X",
                    "Amount": 10.5,
                    "SuccessRedirectUrl": "https://www.google.com",
                    "FailedRedirectUrl": "https://www.yahoo.com",
                    "WebHookUrl": "https://www.mysite.com/CardComLPWebHook",
                    "Document": {
                      "To": "test client",
                      "Email": "test@testDomain.com",
                      "Products": [
                        {
                          "Description": "my item to sell",
                          "UnitCost": 10.5
                        }
                      ]
                    }
                  }
                },
                "Charge Only": {
                  "description": "Example of how to create a new payment page that charges the cardholder a fixed amount",
                  "value": {
                    "TerminalNumber": 1000,
                    "ApiName": "MyApiDemo",
                    "ReturnValue": "Z12332X",
                    "Amount": 10.5,
                    "SuccessRedirectUrl": "https://www.google.com",
                    "FailedRedirectUrl": "https://www.yahoo.com",
                    "WebHookUrl": "https://www.mysite.com/CardComLPWebHook",
                    "Document": {
                      "Name": "test client",
                      "Email": "test@testDomain.com",
                      "Products": [
                        {
                          "Description": "my item to sell",
                          "UnitCost": 10.5
                        }
                      ]
                    }
                  }
                },
                "Charge Only Advance Options": {
                  "description": "",
                  "value": {
                    "TerminalNumber": 1000,
                    "ApiName": "MyApiDemo",
                    "Operation": "ChargeOnly",
                    "ReturnValue": "Z12332X",
                    "Amount": 1,
                    "SuccessRedirectUrl": "https://secure.cardcom.solutions/SuccessAndFailDealPage/Success.aspx",
                    "FailedRedirectUrl": "https://secure.cardcom.co.il/SuccessAndFailDealPage/Fail.aspx",
                    "WebHookUrl": "https://webhook.site/79a555d8-e8d6-4cde-9863-b196d8fe5c5d",
                    "AdvancedDefinition": {
                      "VirtualTerminal": {
                        "IsEnable": true
                      }
                    },
                    "Document": {
                      "Name": "TestClient",
                      "DocumentTypeToCreate": "Order",
                      "Email": "test@testDomain.com",
                      "Products": [
                        {
                          "Description": "my item to sell",
                          "UnitCost": 10.5
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLowProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "callbacks": {
          "single": {
            "WebHookUrl": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "nullable": true,
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/LowProfileResult"
                          }
                        ]
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/LowProfile/GetLpResult": {
      "post": {
        "tags": [
          "LowProfile"
        ],
        "summary": "Get the result of an Iframe \\ Redirect deal",
        "description": "Create iframe redirect page to charge the customer ",
        "operationId": "LowProfile_GetLpResult",
        "requestBody": {
          "x-name": "GetLowProfileResult",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GetLowProfileResult"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LowProfileResult"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/RecuringPayments/GetMuhlafimFile": {
      "post": {
        "tags": [
          "RecuringPayments"
        ],
        "summary": "Get muhlafim cards",
        "description": "Recurring Payments",
        "operationId": "RecuringPayments_GetMuhlafimFile",
        "requestBody": {
          "x-name": "requestObj",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GetMuhlafimRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DtoResponseOfMuhlafimData"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/RecuringPayments/GetRecurringPayment": {
      "get": {
        "tags": [
          "RecuringPayments"
        ],
        "summary": "Get recurring payment info",
        "description": "Recurring Payments",
        "operationId": "RecuringPayments_GetRecurringPayment",
        "requestBody": {
          "x-name": "query",
          "description": "body Params",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RecurringPaymentQuery"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtGetRecurringPaymentRsp"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/RecuringPayments/GetRecurringPaymentHistory": {
      "get": {
        "tags": [
          "RecuringPayments"
        ],
        "summary": "Get recurring payment history",
        "description": "Recurring Payments",
        "operationId": "RecuringPayments_GetRecurringPaymentHistory",
        "requestBody": {
          "x-name": "query",
          "description": "body Params",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RecurringPaymentHistoryQuery"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtGetRecurringPaymentHistoryRsp"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/RecuringPayments/GetMuhlafimByDate": {
      "post": {
        "tags": [
          "RecuringPayments"
        ],
        "summary": "Get muhlafim tokens",
        "description": "Recurring Payments",
        "operationId": "RecuringPayments_GetMuhlafimByDate",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MuhlafimByDateRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtGetListOfFilesRsp"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/RecuringPayments/IsBankNumberValid": {
      "get": {
        "tags": [
          "RecuringPayments"
        ],
        "summary": "Is Bank Number Valid",
        "description": "Recurring Payments",
        "operationId": "RecuringPayments_IsBankNumberValid",
        "requestBody": {
          "x-name": "request",
          "description": "body Params",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/IsBankNumberValidReq"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtIsBankNumberValidRsp"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/RecuringPayments/ChangeStatusForHistoryRecurringToIrrevocable": {
      "post": {
        "tags": [
          "RecuringPayments"
        ],
        "summary": "Update debit order history item to irrevocable status",
        "description": "Recurring Payments",
        "operationId": "RecuringPayments_ChangeStatusForHistoryRecurringToIrrevocable",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ChangeStatusForHistoryRecurringToIrrevocableReqest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtIsBankNumberValidRsp"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Account/GetByAccountId": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Get Account info by cardcom Account Id",
        "description": "Account operation ",
        "operationId": "Account_GetByAccountId",
        "requestBody": {
          "x-name": "GetAccountById",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GetAccountById"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountByIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Transactions/ListTransactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "List of Transactions",
        "description": "Transactions operation ",
        "operationId": "Transactions_ListTransactions",
        "requestBody": {
          "x-name": "getTransactionReq",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ListTransactionsReq"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTranzactionsResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Transactions/GetTransactionInfoById": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get Transaction Info By Id",
        "description": "Transactions operation ",
        "operationId": "Transactions_GetTransactionInfoById",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TransactionInfoRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtShvaParams"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Transactions/Transaction": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Do Transaction",
        "description": "Transactions operation ",
        "operationId": "Transactions_Transaction",
        "requestBody": {
          "x-name": "req",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TransactionReq"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request, see 'ResponseCode' if request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Transactions/RefundByTransactionId": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Refund By Transaction Id",
        "description": "Transactions operation ",
        "operationId": "Transactions_RefundByTransactionId",
        "requestBody": {
          "x-name": "req",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RefundByTransactionIdReq"
                  }
                ]
              },
              "examples": {
                "My Name": {
                  "description": "dEFULT",
                  "value": {
                    "ApiName": "string",
                    "ApiPassword": "string",
                    "TransactionId": 0,
                    "ExternalDealId": "string",
                    "ExternalMerchantId": "string",
                    "PartialSum": 0,
                    "CancelOnly": false,
                    "SapakMutav": "string",
                    "AllowMultipleRefunds": false,
                    "CustomFields": [
                      {
                        "Id": 1,
                        "Value": "string"
                      }
                    ]
                  }
                },
                "New Sample": {
                  "description": "Partial refund with the ability to refund partially from the transaction sum",
                  "value": {
                    "ApiName": "kzFKfohEvL6AOF8aMEJz",
                    "ApiPassword": "FIDHIh4pAadw3Slbdsjg",
                    "TransactionId": 219282004,
                    "PartialSum": 200,
                    "CancelOnly": false,
                    "AllowMultipleRefunds": true
                  }
                },
                "New Sample 1": {
                  "description": "Cancel only",
                  "value": {
                    "ApiName": "CardTest1994",
                    "ApiPassword": "Terminaltest2026",
                    "TransactionId": 219284386,
                    "CancelOnly": true
                  }
                }
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request, see 'ResponseCode' if request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundByTransactionIdResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Transactions/SpecialTransactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Special Transactions",
        "description": "get other transaction if you use CardCom as acquire",
        "operationId": "Transactions_SpecialTransactions",
        "requestBody": {
          "x-name": "req",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SpecialTransactionsReq"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request, see 'ResponseCode' if request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecialTransactionsResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Transactions/GetTransactionByExternalUniqTran": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Query Transaction By ExternalUniqTranId",
        "description": "use to validate if there is a successful transaction using the External UniqTranId parameter",
        "operationId": "Transactions_GetTransactionByExternalUniqTran",
        "requestBody": {
          "x-name": "req",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GetExternalUniqTranIdStatusReq"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request, see 'ResponseCode' if request succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Documents/CreateDocument": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Create a document associated to a deal",
        "description": "Documents operations ",
        "operationId": "Documents_CreateDocument",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateDocumentRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Documents/CancelDoc": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Cancel document and refund credit card",
        "description": "Documents operations ",
        "operationId": "Documents_CancelDoc",
        "requestBody": {
          "x-name": "cancelDocRequest",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CancelDocRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelDocResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Documents/SendAllDocumentsToEmail": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "send PDF docuemnts to email by date range",
        "description": "Documents operations ",
        "operationId": "Documents_SendAllDocumentsToEmail",
        "requestBody": {
          "x-name": "SendAllDocumentsToEmailRequest",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SendAllDocumentsToEmailRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendAllDocumentsToEmailResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Documents/GetReport": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Query invoice documents",
        "description": "Documents operations ",
        "operationId": "Documents_GetReport",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DocumentSearchRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Documents/CrossDocument": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Cross document",
        "description": "Documents operations ",
        "operationId": "Documents_CrossDocument",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CrossDocumentRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossDocumentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Documents/CreateTaxInvoice": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Create Tax invoice",
        "description": "Documents operations ",
        "operationId": "Documents_CreateTaxInvoice",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaxInvoiceRequest"
                  }
                ]
              },
              "examples": {
                "My Name": {
                  "description": "Defult",
                  "value": {
                    "ApiName": "string",
                    "ApiPassword": "string",
                    "InvoiceType": 0,
                    "InvoiceHead": {
                      "CustName": "string",
                      "CustAddresLine1": "string",
                      "CustAddresLine2": "string",
                      "CustCity": "string",
                      "CustLinePH": "string",
                      "CustMobilePH": "string",
                      "CompID": "string",
                      "Language": "string",
                      "Languge": "string",
                      "Comments": "string",
                      "CoinID": 0,
                      "CoinIsoName": "string",
                      "Email": "string",
                      "SendByEmail": true,
                      "ExtIsVatFree": true,
                      "ManualInvoiceNumber": "string",
                      "DepartmentId": "string",
                      "DepartmentIdShort": 0,
                      "IsLoadInfoFromAccountID": "string",
                      "IsAutoCreateUpdateAccount": "string",
                      "AccountForeignKey": "string",
                      "SiteUniqueId": "string",
                      "DeliveryName": "string",
                      "InvDate": "string",
                      "ValueDate": "string",
                      "ExternalId": "string",
                      "AccountID": "string"
                    },
                    "InvoiceLines": [
                      {
                        "Description": "string",
                        "Quantity": 0,
                        "IsPriceIncludeVAT": true,
                        "IsVatFree": "string",
                        "Price": 0,
                        "ProductID": "string",
                        "TotalLineCost": "string"
                      }
                    ],
                    "Cash": 0,
                    "CustomLines": [
                      {
                        "TransactionID": 0,
                        "TranDate": "2019-08-24T14:15:22Z",
                        "Description": "string",
                        "asmacta": "string",
                        "Sum": 0
                      }
                    ],
                    "Cheques": [
                      {
                        "ChequeNumber": "string",
                        "BankNumber": 0,
                        "SnifNumber": 0,
                        "AccountNumber": "string",
                        "DateCheque": "2019-08-24T14:15:22Z",
                        "Sum": 0
                      }
                    ],
                    "DealNumbers": [
                      {
                        "DealNumber": 0
                      }
                    ]
                  }
                },
                "New Sample": {
                  "description": "Creating a document with a custom payment.",
                  "value": {
                    "TerminalNumber": 1000,
                    "ApiName": "CardTest1994",
                    "ApiPassword": "Terminaltest2026",
                    "InvoiceType": "400",
                    "InvoiceHead": {
                      "CustName": "test",
                      "Languge": "he"
                    },
                    "CustomLines": [
                      {
                        "TransactionID": 24,
                        "TranDate": "02/01/2025",
                        "Description": "work",
                        "asmacta": "123456-ZZC",
                        "Sum": 15
                      }
                    ],
                    "InvoiceLines": [
                      {
                        "Description": "test",
                        "Quantity": "1",
                        "IsPriceIncludeVAT": "false",
                        "IsVatFree": "true",
                        "Price": "15",
                        "ProductID": "1"
                      }
                    ]
                  }
                },
                "New Sample 1": {
                  "description": "Creating a document with a cheque payment.",
                  "value": {
                    "TerminalNumber": 1000,
                    "ApiName": "CardTest1994",
                    "ApiPassword": "Terminaltest2026",
                    "InvoiceType": "400",
                    "InvoiceHead": {
                      "CustName": "test",
                      "Languge": "he"
                    },
                    "InvoiceLines": [
                      {
                        "Description": "test",
                        "Quantity": "1",
                        "IsPriceIncludeVAT": "false",
                        "IsVatFree": "true",
                        "Price": "20",
                        "ProductID": "1"
                      }
                    ],
                    "ChequeNumber": [
                      {
                        "ChequeNumber": "1234",
                        "BankNumber": 12,
                        "SnifNumber": 1,
                        "AccountNumber": "123456",
                        "DateCheque": "03/12/2025",
                        "Sum": 15
                      }
                    ]
                  }
                },
                "New Sample 2": {
                  "description": "Creating a document with a cash  payment.",
                  "value": {
                    "TerminalNumber": 1000,
                    "ApiName": "test2025",
                    "ApiPassword": "test5000$",
                    "InvoiceType": "400",
                    "InvoiceHead": {
                      "CustName": "test",
                      "Languge": "he"
                    },
                    "cash": 15,
                    "InvoiceLines": [
                      {
                        "Description": "test",
                        "Quantity": "1",
                        "IsPriceIncludeVAT": "false",
                        "IsVatFree": "true",
                        "Price": "15",
                        "ProductID": "1"
                      }
                    ]
                  }
                },
                "New Sample 3": {
                  "description": "Creating a document with a credit card  payment.",
                  "value": {
                    "TerminalNumber": 1000,
                    "ApiName": "test2025",
                    "ApiPassword": "test5000$",
                    "InvoiceType": "400",
                    "InvoiceHead": {
                      "CustName": "test",
                      "Languge": "en"
                    },
                    "DealNumbers": [
                      {
                        "DealNumber": 204751411
                      }
                    ],
                    "InvoiceLines": [
                      {
                        "Description": "test",
                        "Quantity": "1",
                        "IsPriceIncludeVAT": "false",
                        "IsVatFree": "true",
                        "Price": "15",
                        "ProductID": "1"
                      }
                    ]
                  }
                }
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Documents/CreateDocumentUrl": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Create document URL",
        "description": "Documents operations ",
        "operationId": "Documents_CreateDocumentUrl",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDocumentUrlResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/GetCompanyStatus": {
      "get": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Get company status - Validate KYC info",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_GetCompanyStatus",
        "parameters": [
          {
            "name": "companyNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "terminalNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RSContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RSContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RSContent"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/AddDocumentToCompany": {
      "post": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Add document to company",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_AddDocumentToCompany",
        "requestBody": {
          "x-name": "values",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AcquiredCompanyAccountFileUpload"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenNewCompanyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/ValidateCompanyCreation": {
      "post": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Validate company fields",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_ValidateCompanyCreation",
        "requestBody": {
          "x-name": "acquiredCompanyAccountWithDocuments",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AcquiredCompanyAccountWithDocuments"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RSContent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RSContent"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RSContent"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/NewCompany": {
      "post": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "New company",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_NewCompany",
        "requestBody": {
          "x-name": "values",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AcquiredCompanyAccount"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenNewCompanyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/CloseCompany": {
      "post": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Close company",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_CloseCompany",
        "requestBody": {
          "x-name": "values",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AcquiredCompanyAccount"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenNewCompanyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/ReOpenCompany": {
      "post": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Reopen company",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_ReOpenCompany",
        "requestBody": {
          "x-name": "values",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AcquiredCompanyAccount"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenNewCompanyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/GetCities": {
      "get": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Get cities",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_GetCities",
        "parameters": [
          {
            "name": "SupplierUserName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "secret",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "startwith",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataGov_CityCodes"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/GetStreets": {
      "get": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Get streets",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_GetStreets",
        "parameters": [
          {
            "name": "SupplierUserName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "secret",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "cityCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "startwith",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataGov_StreetCodes"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/GetCountries": {
      "get": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Get countries",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_GetCountries",
        "parameters": [
          {
            "name": "SupplierUserName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "secret",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountriesISO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/GetBanks": {
      "get": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Get banks",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_GetBanks",
        "parameters": [
          {
            "name": "SupplierUserName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "secret",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Banks"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/GetBanksBranches": {
      "get": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Get banks branches",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_GetBanksBranches",
        "parameters": [
          {
            "name": "SupplierUserName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "secret",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "bankNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BanksBranches"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/GetMainMCCs": {
      "get": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Get Main MCCs",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_GetMainMCCs",
        "parameters": [
          {
            "name": "SupplierUserName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "secret",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MCC_DBs_MAIN"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/GetSubMCCs": {
      "get": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Get Sub MCCs",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_GetSubMCCs",
        "parameters": [
          {
            "name": "SupplierUserName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "secret",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "mccCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MCC_DBs"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/MeagedAddCompany": {
      "post": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Add Company for Meaged",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_MeagedAddCompany",
        "requestBody": {
          "x-name": "companyMeagedInfo",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeagedOpenRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenMeagedResponse"
                }
              }
            }
          }
        },
        "callbacks": {
          "single": {
            "WebHookUrl": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "nullable": true,
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/SapakStatusChangeNotify"
                          }
                        ]
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/CompanyOperations/MeagedGetCompanyInfo": {
      "post": {
        "tags": [
          "CompanyOperations"
        ],
        "summary": "Get sapak numbers status by SapakNumber or BusinessRegistrationNumber",
        "description": "RecruitmentSystem operations",
        "operationId": "CompanyOperations_MeagedGetCompanyInfo",
        "requestBody": {
          "x-name": "meagedGetCompanyInfoReuqest",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeagedGetCompanyInfoReuqest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeagedGetCompanyInfoResponse"
                }
              }
            }
          }
        },
        "callbacks": {
          "single": {
            "WebHookUrl": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "nullable": true,
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/SapakStatusChangeNotify"
                          }
                        ]
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Financial/CreditCardTransactions": {
      "post": {
        "tags": [
          "Financial"
        ],
        "summary": "CreditCard Transactions",
        "description": "",
        "operationId": "Financial_CreditCardTransactions",
        "requestBody": {
          "x-name": "req",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreditCardTransactionsReq"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCardTransactionsResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Financial/CreditCardTransactionsHalted": {
      "post": {
        "tags": [
          "Financial"
        ],
        "summary": "CreditCard Transactions - Halted",
        "description": "",
        "operationId": "Financial_CreditCardTransactionsHalted",
        "requestBody": {
          "x-name": "req",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreditCardTransactionsHaltedReq"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCardTransactionsHaltedResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Financial/FinancialTransactions": {
      "post": {
        "tags": [
          "Financial"
        ],
        "summary": "Finacial tranzaction",
        "description": "",
        "operationId": "Financial_FinancialTransactions",
        "requestBody": {
          "x-name": "req",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FinancialTransactionsReq"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialTransactionsResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Financial/BankDeposites": {
      "post": {
        "tags": [
          "Financial"
        ],
        "summary": "Bank Deposites",
        "description": "",
        "operationId": "Financial_BankDeposites",
        "requestBody": {
          "x-name": "req",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BankDepositesReq"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankDepositesResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/Financial/GetSlikaInvoices": {
      "post": {
        "tags": [
          "Financial"
        ],
        "summary": "Get billing report for account",
        "description": "",
        "operationId": "Financial_GetSlikaInvoices",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SlikaInvoicesRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "200": {
            "description": "successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlikaInvoicesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/TapTransactions/PrepareDevice": {
      "post": {
        "tags": [
          "TapTransactions"
        ],
        "summary": "PrepareDevice - Get device information before performing Tap On Phone transaction",
        "description": "Tap On Phone operations",
        "operationId": "TapTransactions_PrepareDevice",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PrepareDeviceRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareDeviceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/TapTransactions/ProcessTransaction": {
      "post": {
        "tags": [
          "TapTransactions"
        ],
        "summary": "ProcessTransaction - Process Tap On Phone transaction",
        "description": "Tap On Phone operations",
        "operationId": "TapTransactions_ProcessTransaction",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProcessTransactionRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessTransactionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/TapTransactions/GetTransactions": {
      "post": {
        "tags": [
          "TapTransactions"
        ],
        "summary": "GetTransactions - Get all TAP transaction by given terminal number and dates range",
        "description": "Tap On Phone operations",
        "operationId": "TapTransactions_GetTransactions",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GetTransactionsRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessTransactionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v11/TapTransactions/GetDevices": {
      "post": {
        "tags": [
          "TapTransactions"
        ],
        "summary": "GetDevices - Get all registered TAP devices",
        "description": "Tap On Phone operations",
        "operationId": "TapTransactions_GetDevices",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GetDevicesRequest"
                  }
                ]
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessTransactionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request , see 'Description' in response for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateLowProfileResponse": {
        "type": "object",
        "description": "Response for creating low profile page",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "LowProfileId": {
            "type": "string",
            "description": "The unique Id of the low profile page - save it in you data base!",
            "format": "guid",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "description": "the url you need to redirect the card holder",
            "nullable": true
          },
          "UrlToPayPal": {
            "type": "string",
            "description": "the url you need to redirect the card holder",
            "nullable": true
          },
          "UrlToBit": {
            "type": "string",
            "description": "the url you need to redirect the card holder",
            "nullable": true
          }
        }
      },
      "ErrorInfo": {
        "type": "object",
        "description": "error information for non http status 200",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "nullable": true
          }
        }
      },
      "CreateLowProfile": {
        "type": "object",
        "description": "create a new one time, Iframe \\ redirect page",
        "additionalProperties": false,
        "required": [
          "TerminalNumber",
          "ApiName",
          "Amount",
          "SuccessRedirectUrl",
          "FailedRedirectUrl",
          "WebHookUrl"
        ],
        "properties": {
          "TerminalNumber": {
            "type": "integer",
            "description": "Cardcom terminal number",
            "format": "int32"
          },
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "Operation": {
            "description": "Type of operation to perform , default - ChargeOnly",
            "default": "ChargeOnly",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Operation"
              }
            ]
          },
          "ReturnValue": {
            "type": "string",
            "description": "A string of data to save on the transaction, usually send your unique order Id, you will get it back in the WebHook URL",
            "maxLength": 250,
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount of tranzaction (12.36)",
            "format": "decimal"
          },
          "SuccessRedirectUrl": {
            "type": "string",
            "description": "Url to redirect the card holder on successful transaction , (http(s)://site.com/Success)",
            "maxLength": 500,
            "minLength": 1
          },
          "FailedRedirectUrl": {
            "type": "string",
            "description": "Url to redicet on failed transaction (http(s)://site.com/failed)",
            "maxLength": 500,
            "minLength": 1
          },
          "CancelRedirectUrl": {
            "type": "string",
            "nullable": true
          },
          "WebHookUrl": {
            "type": "string",
            "description": "A webhook URL is a web address that receives real-time data about the transaction",
            "maxLength": 500,
            "minLength": 1
          },
          "ProductName": {
            "type": "string",
            "description": "Text to show to card holder if no documents is send",
            "maxLength": 250,
            "nullable": true
          },
          "Language": {
            "type": "string",
            "description": "Page Language - he,en,ru,sp (https://cardcomapinametovalue.zendesk.com/hc/he/articles/27007768777234-שפות-לדף-פרופיל-נמוך-Language)",
            "default": "he",
            "maxLength": 2,
            "nullable": true
          },
          "ISOCoinId": {
            "type": "integer",
            "description": "ISO Coin Code ,1 - ILS, 2 - USD, else ISO Coin from list : https://en.wikipedia.org/wiki/ISO_4217",
            "format": "int32",
            "default": 1,
            "nullable": true
          },
          "UIDefinition": {
            "description": "UI Definition for the created page",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UIDefinition"
              }
            ]
          },
          "AdvancedDefinition": {
            "description": "Advanced transaction definition",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AdvancedLPDefinition"
              }
            ]
          },
          "Document": {
            "description": "Document information",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DocumentLP"
              }
            ]
          },
          "UTM": {
            "description": "Document information",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/LPUtmData"
              }
            ]
          }
        }
      },
      "Operation": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "ChargeOnly",
          "ChargeAndCreateToken",
          "CreateTokenOnly",
          "SuspendedDeal",
          "Do3DSAndSubmit"
        ],
        "enum": [
          "ChargeOnly",
          "ChargeAndCreateToken",
          "CreateTokenOnly",
          "SuspendedDeal",
          "Do3DSAndSubmit"
        ]
      },
      "UIDefinition": {
        "type": "object",
        "description": "UI Definition for the created page",
        "additionalProperties": false,
        "properties": {
          "IsHideCardOwnerName": {
            "type": "boolean",
            "description": "Hide card Owner name",
            "default": false,
            "nullable": true
          },
          "CardOwnerNameValue": {
            "type": "string",
            "description": "Fill the value of CardOwnerName input box",
            "default": "",
            "maxLength": 50,
            "nullable": true
          },
          "CardOwnerIdValue": {
            "type": "string",
            "description": "Card onwer Id aka teudat zeut",
            "default": "",
            "nullable": true
          },
          "IsHideCardOwnerPhone": {
            "type": "boolean",
            "description": "Hide card owner phone number",
            "default": false,
            "nullable": true
          },
          "CardOwnerPhoneValue": {
            "type": "string",
            "description": "Fill the value of CardOwnerPhone input box",
            "maxLength": 50,
            "nullable": true
          },
          "IsCardOwnerPhoneRequired": {
            "type": "boolean",
            "description": "Is CardOwnerPhone input box required",
            "default": true,
            "nullable": true
          },
          "CardOwnerEmailValue": {
            "type": "string",
            "description": "fill the value of card owner email",
            "maxLength": 50,
            "nullable": true
          },
          "IsHideCardOwnerEmail": {
            "type": "boolean",
            "description": "Hide card owner email",
            "default": false,
            "nullable": true
          },
          "IsCardOwnerEmailRequired": {
            "type": "boolean",
            "description": "Is card owner email input box required",
            "default": true,
            "nullable": true
          },
          "IsHideCardOwnerIdentityNumber": {
            "type": "boolean",
            "description": "Hide card ownder identity number",
            "default": false,
            "nullable": true
          },
          "IsHideCVV": {
            "type": "boolean",
            "description": "Hide card number CVV",
            "default": false,
            "nullable": true
          },
          "CSSUrl": {
            "type": "string",
            "description": "Full URL address of CSS file. it will be injected to page, required CardCom premition (http(s)://site.com/file.css)",
            "maxLength": 250,
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "description": "Fill the value of CustomFields input box by Field Id",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "GooglePayBtnDesign": {
            "description": "Set how the Google Pay button will appear",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/GooglePayBtnDesign"
              }
            ]
          }
        }
      },
      "CustomField": {
        "type": "object",
        "description": "Custom field",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Custom field id",
            "maximum": 25.0,
            "minimum": 1.0
          },
          "Value": {
            "type": "string",
            "description": "Custom field value",
            "maxLength": 50
          }
        }
      },
      "GooglePayBtnDesign": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ButtonColor": {
            "description": "GPay button color",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ButtonColor"
              }
            ]
          },
          "ButtonType": {
            "description": "GPay button type (text on the button)",
            "default": "Buy",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ButtonType"
              }
            ]
          },
          "ButtonLocale": {
            "description": "GPay button language",
            "default": "English",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ButtonLocale"
              }
            ]
          },
          "ButtonWidth": {
            "type": "string",
            "description": "GPay button width. Default 328 (px)",
            "default": "328",
            "nullable": true
          },
          "ButtonHeight": {
            "type": "string",
            "description": "GPay button height. Default 40 (px)",
            "default": "4",
            "nullable": true
          }
        }
      },
      "ButtonColor": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Default",
          "White",
          "Black"
        ],
        "enum": [
          "Default",
          "White",
          "Black"
        ]
      },
      "ButtonType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Book",
          "Buy",
          "Checkout",
          "Donate",
          "Order",
          "Pay",
          "Plain",
          "Subscribe"
        ],
        "enum": [
          "Book",
          "Buy",
          "Checkout",
          "Donate",
          "Order",
          "Pay",
          "Plain",
          "Subscribe"
        ]
      },
      "ButtonLocale": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Arabic",
          "Bulgarian",
          "Catalan",
          "Chinese",
          "Croatian",
          "Czech",
          "Danish",
          "Dutch",
          "English",
          "Estonian",
          "Finnish",
          "French",
          "German",
          "Greek",
          "Indonesian",
          "Italian",
          "Japanese",
          "Korean",
          "Malay",
          "Norwegian",
          "Polish",
          "Portuguese",
          "Russian",
          "Serbian",
          "Slovak",
          "Slovenian",
          "Spanish",
          "Swedish",
          "Thai",
          "Turkish",
          "Ukrainian"
        ],
        "enum": [
          "Arabic",
          "Bulgarian",
          "Catalan",
          "Chinese",
          "Croatian",
          "Czech",
          "Danish",
          "Dutch",
          "English",
          "Estonian",
          "Finnish",
          "French",
          "German",
          "Greek",
          "Indonesian",
          "Italian",
          "Japanese",
          "Korean",
          "Malay",
          "Norwegian",
          "Polish",
          "Portuguese",
          "Russian",
          "Serbian",
          "Slovak",
          "Slovenian",
          "Spanish",
          "Swedish",
          "Thai",
          "Turkish",
          "Ukrainian"
        ]
      },
      "AdvancedLPDefinition": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "VirtualTerminal": {
            "description": "virtual terminal mode propertis",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/VirtualTerminalParams"
              }
            ]
          },
          "JValidateType": {
            "description": "Type of transaction for credit card in operation : CreateTokenOnly or Suspended deal, can be J2 (simple card validation) or J5 (authoriz)",
            "default": 5,
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/JValidateType"
              }
            ]
          },
          "IsAVSEnable": {
            "type": "boolean",
            "description": "Is AVS enabled validation enabled",
            "default": false,
            "nullable": true
          },
          "SapakMutav": {
            "type": "string",
            "description": "SapakMutav number, for meaged terminals",
            "maxLength": 15,
            "nullable": true
          },
          "CreditType": {
            "type": "integer",
            "description": "Type of credit for the card, for israel cards only.  6 - israel credit for multiple payments",
            "default": 1,
            "nullable": true
          },
          "IsRefundDeal": {
            "type": "boolean",
            "description": "Is the transaction will be a refund deal",
            "default": false,
            "nullable": true
          },
          "ApiPassword": {
            "type": "string",
            "description": "Required only if IsRefundDeal is true",
            "nullable": true
          },
          "ISOCoinName": {
            "type": "string",
            "description": "ISO name (alternative to IsoCoinId). ISO Coin Name from list : https://en.wikipedia.org/wiki/ISO_4217",
            "maxLength": 3,
            "nullable": true
          },
          "MinNumOfPayments": {
            "type": "integer",
            "description": "Minimum number of payment to show to card holder",
            "format": "int32",
            "default": 1,
            "maximum": 36.0,
            "minimum": 1.0,
            "nullable": true
          },
          "MaxNumOfPayments": {
            "type": "integer",
            "description": "Maximum number of payment to show to card holder , default 1",
            "format": "int32",
            "default": 1,
            "maximum": 36.0,
            "minimum": 1.0,
            "nullable": true
          },
          "SelectedNumOfPayments": {
            "type": "integer",
            "description": "Change the selectd number of payments in the UI selection box , default (MinNumOfPayments)",
            "default": 0,
            "nullable": true
          },
          "FirstPayment": {
            "type": "number",
            "description": "Change the selectd number of payments in the UI selection box , default (MinNumOfPayments)",
            "format": "decimal",
            "nullable": true
          },
          "ConstPayment": {
            "type": "number",
            "description": "Change the selectd number of payments in the UI selection box , default (MinNumOfPayments)",
            "format": "decimal",
            "nullable": true
          },
          "Token": {
            "type": "string",
            "description": "3-D secure and Token tranzactions can use token instead of card number,it will be used to charge the customer if exist ",
            "format": "guid",
            "nullable": true
          },
          "CardExpirationYear": {
            "type": "string",
            "description": "Card expiration year will be pre-set to the customer. 4 characters string.",
            "nullable": true
          },
          "CardExpirationMonth": {
            "type": "string",
            "description": "Card expiration Month will be pre-set to the customer. Values 01-12",
            "nullable": true
          },
          "CardNumber": {
            "type": "string",
            "description": "Full card number, a token will be created and can be used to start 3DS process and charge",
            "default": "",
            "nullable": true
          },
          "CVV": {
            "type": "string",
            "description": "CVV used for 3DS process and charge",
            "default": "",
            "nullable": true
          },
          "ThreeDSecureState": {
            "description": "should this Tranasaction pass 3DSecure? Auto (or null): 3-D Secure validation will be performed as it configured by CardCom definition. Enable - Transaction will pass 3-D Secure validation. Disable - Transaction will NOT pass 3-D Secure validation",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureState"
              }
            ]
          },
          "ShouldOpenPinpadOnPageLoad": {
            "type": "boolean",
            "description": "Will open PinPad charge window on load",
            "nullable": true
          },
          "IsExternal": {
            "type": "boolean",
            "description": "Is payment performed in external payment page",
            "default": false,
            "nullable": true
          }
        }
      },
      "VirtualTerminalParams": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "IsEnable": {
            "type": "boolean",
            "description": "Set to True if the tranzactio will be charge by the merchent and not by the card holder",
            "default": false,
            "nullable": true
          },
          "IsOpenSum": {
            "type": "boolean",
            "description": "allow the merchent to change the sum of the transaction",
            "default": false,
            "nullable": true
          },
          "ChargeOnSwipe": {
            "type": "boolean",
            "description": "When using Credit Card reader , will the \"commit\" button be press after the merchent swipe the credit card",
            "default": false,
            "nullable": true
          }
        }
      },
      "JValidateType": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "J2",
          "J5"
        ],
        "enum": [
          2,
          5
        ]
      },
      "ThreeDSecureState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Auto",
          "Enabled",
          "Disabled"
        ],
        "enum": [
          "Auto",
          "Enabled",
          "Disabled"
        ]
      },
      "DocumentLP": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocumentBase"
          },
          {
            "type": "object",
            "description": "Create document in Low Profile interface",
            "additionalProperties": false,
            "properties": {
              "IsAllowEditDocument": {
                "type": "boolean",
                "description": "Allow the card owner to edit the \"document\" information: To, address, phone... (not the products and amount) , default = false",
                "default": false,
                "nullable": true
              },
              "IsShowOnlyDocument": {
                "type": "boolean",
                "description": "Will only show the document information to the card owner. NO DOCCUMENT WILL BE CREATED. default = false (system will create a document)",
                "default": false,
                "nullable": true
              },
              "Language": {
                "type": "string",
                "description": "The language of the document to be created. ",
                "default": "he",
                "nullable": true
              }
            }
          }
        ]
      },
      "DocumentBase": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Name"
        ],
        "properties": {
          "DocumentTypeToCreate": {
            "description": "Document type to create,  default = 0, will automatically update from admin panel configuration",
            "default": "Auto",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DocumentToCreate"
              }
            ]
          },
          "Name": {
            "type": "string",
            "description": "document To",
            "maxLength": 50,
            "minLength": 1
          },
          "TaxId": {
            "type": "string",
            "description": "Business registration number or user Identity number",
            "maxLength": 50,
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email To send the document to",
            "maxLength": 50,
            "nullable": true
          },
          "IsSendByEmail": {
            "type": "boolean",
            "description": "Send the document by email",
            "default": true,
            "nullable": true
          },
          "AddressLine1": {
            "type": "string",
            "description": "Address Line 1",
            "maxLength": 50,
            "nullable": true
          },
          "AddressLine2": {
            "type": "string",
            "description": "Address Line 2",
            "maxLength": 50,
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "City",
            "maxLength": 50,
            "nullable": true
          },
          "Mobile": {
            "type": "string",
            "description": "Mobile phone number",
            "maxLength": 50,
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "description": "Land line phone number",
            "maxLength": 50,
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "comments to print on the document",
            "maxLength": 250,
            "nullable": true
          },
          "IsVatFree": {
            "type": "boolean",
            "description": "Is all the items in this document are VAT free?",
            "default": false,
            "nullable": true
          },
          "DepartmentId": {
            "type": "integer",
            "description": "department ID as show at the admin panel, for reports",
            "maximum": 9999.0,
            "minimum": 0.0,
            "nullable": true
          },
          "AdvancedDefinition": {
            "description": "Advanced document definition",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AdvancedDocumentDefinition"
              }
            ]
          },
          "Products": {
            "type": "array",
            "description": "Document products",
            "items": {
              "$ref": "#/components/schemas/Products"
            }
          },
          "ExternalId": {
            "type": "string",
            "description": "External Id, custom info on document",
            "maxLength": 50,
            "nullable": true
          }
        }
      },
      "DocumentToCreate": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Auto",
          "TaxInvoiceAndReceipt",
          "TaxInvoiceAndReceiptRefund",
          "Receipt",
          "ReceiptRefund",
          "Quote",
          "Order",
          "OrderConfirmation",
          "OrderConfirmationRefund",
          "DeliveryNote",
          "DeliveryNoteRefund",
          "ProformaInvoice",
          "DemandForPayment",
          "DemandForPaymentRefund",
          "ProformaDealInvoice",
          "ProformaDealInvoiceRefund",
          "TaxInvoice",
          "ProformaInvoiceRefund",
          "TaxInvoiceRefund",
          "ReceiptForTaxInvoice",
          "DonationReceipt",
          "DonationReceiptRefund",
          "ReceiptForTaxInvoiceRefund"
        ],
        "enum": [
          "Auto",
          "TaxInvoiceAndReceipt",
          "TaxInvoiceAndReceiptRefund",
          "Receipt",
          "ReceiptRefund",
          "Quote",
          "Order",
          "OrderConfirmation",
          "OrderConfirmationRefund",
          "DeliveryNote",
          "DeliveryNoteRefund",
          "ProformaInvoice",
          "DemandForPayment",
          "DemandForPaymentRefund",
          "ProformaDealInvoice",
          "ProformaDealInvoiceRefund",
          "TaxInvoice",
          "ProformaInvoiceRefund",
          "TaxInvoiceRefund",
          "ReceiptForTaxInvoice",
          "DonationReceipt",
          "DonationReceiptRefund",
          "ReceiptForTaxInvoiceRefund"
        ]
      },
      "AdvancedDocumentDefinition": {
        "type": "object",
        "description": "Advanced document definition",
        "additionalProperties": false,
        "properties": {
          "IsAutoCreateUpdateAccount": {
            "description": "Is to Auto update or create an Account, default = auto, will automatically update from admin panel configuration \r\n במידה ולא מועבר יתבצע איתור לפי  מפתח זר ולאחר מכן לפי מזהה ייחודי אתר ואז לפי  EMAIL לקוח. (הפרמטר הראשון שנמצע בשרת מולצב ולא ממשיך לחפש עוד )\r\n",
            "default": "auto",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConfigBool"
              }
            ]
          },
          "AccountForeignKey": {
            "type": "string",
            "description": "The account number on a Foreign system, use for transfer to 3-party account system ( hashavshevet, SAP )",
            "maxLength": 50,
            "nullable": true
          },
          "SiteUniqueId": {
            "type": "string",
            "description": "Your system unique Id for this account",
            "maxLength": 50,
            "nullable": true
          },
          "AccountID": {
            "type": "integer",
            "description": "Unique account ID in cardcom system, account must exist in CardCom system",
            "format": "int32",
            "nullable": true
          },
          "IsLoadInfoFromAccountID": {
            "type": "boolean",
            "description": "If AccountID is passed, CardCom system will update the document information ( To ,HP_TZ, Email ...) from existing accounts information",
            "default": false,
            "nullable": true
          }
        }
      },
      "ConfigBool": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "auto",
          "true",
          "false"
        ],
        "enum": [
          "auto",
          "true",
          "false"
        ]
      },
      "Products": {
        "type": "object",
        "description": "Products",
        "additionalProperties": false,
        "required": [
          "Description",
          "UnitCost"
        ],
        "properties": {
          "ProductID": {
            "type": "string",
            "description": "Product ID , exemple 'AVG-BB-10;",
            "maxLength": 50,
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "product description",
            "maxLength": 250,
            "minLength": 1
          },
          "Quantity": {
            "type": "number",
            "description": "quantity",
            "format": "decimal",
            "default": 1,
            "maximum": 99999.99,
            "minimum": -99999.99,
            "nullable": true
          },
          "UnitCost": {
            "type": "number",
            "description": "cost of one unit",
            "format": "decimal",
            "default": 0,
            "maximum": 9999999999.99,
            "minimum": -9999999999.99
          },
          "TotalLineCost": {
            "type": "number",
            "description": "Recommended, if the Quantity contains decimal point send the total line cost to prevent round errors",
            "format": "decimal",
            "default": 0,
            "nullable": true
          },
          "IsVatFree": {
            "type": "boolean",
            "description": "Is this product VAT Free , used for mix VAT items in one documents",
            "default": false,
            "nullable": true
          }
        }
      },
      "LPUtmData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Source": {
            "type": "string",
            "nullable": true
          },
          "Medium": {
            "type": "string",
            "nullable": true
          },
          "Campaign": {
            "type": "string",
            "nullable": true
          },
          "Content": {
            "type": "string",
            "nullable": true
          },
          "Term": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LowProfileResult": {
        "type": "object",
        "description": "Result of the low profile page deal",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "nullable": true
          },
          "TerminalNumber": {
            "type": "integer",
            "description": "Cardcom terminal number",
            "format": "int32"
          },
          "LowProfileId": {
            "type": "string",
            "description": "The unique ID of the low profile transaction",
            "format": "guid"
          },
          "TranzactionId": {
            "type": "integer",
            "description": "The Id of the Credit card Transacion",
            "format": "int64"
          },
          "ReturnValue": {
            "type": "string",
            "description": "Same value that was sent on the CreateLowProfile request",
            "nullable": true
          },
          "Operation": {
            "description": "Type of operation",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Operation"
              }
            ]
          },
          "UIValues": {
            "description": "Will contain the value that the card holder enter in the UI",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LowProfileUIValues"
              }
            ]
          },
          "DocumentInfo": {
            "description": "Will no be null is a documents is created",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DocumentInfo"
              }
            ]
          },
          "TokenInfo": {
            "description": "Created token information, Will no be null at operations:  ChargeAndCreateToken, CreateTokenOnly",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TokenInfo"
              }
            ]
          },
          "SuspendedInfo": {
            "description": "SuspendedI deal information, Will no be null at operations: SuspendedDeal",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SuspendedInfo"
              }
            ]
          },
          "TranzactionInfo": {
            "description": "Transaction information, Will no be null at operations: ChargeOnly, ChargeAndCreateToken ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionInfo"
              }
            ]
          },
          "ExternalPaymentVector": {
            "type": "string",
            "description": "ExternalPayment indicator. ",
            "nullable": true
          },
          "Country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "UTM": {
            "description": "UTM data ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/LPUtmData"
              }
            ]
          },
          "IssuerAuthCodeDescription": {
            "type": "string",
            "description": "Issuer authorization code description",
            "nullable": true
          }
        }
      },
      "LowProfileUIValues": {
        "type": "object",
        "description": "values that was filled the the card holder",
        "additionalProperties": false,
        "properties": {
          "CardOwnerEmail": {
            "type": "string",
            "description": "Card Owner's email",
            "maxLength": 50
          },
          "CardOwnerName": {
            "type": "string",
            "description": "Card Owner name.",
            "maxLength": 50
          },
          "CardOwnerPhone": {
            "type": "string",
            "description": "Card Owner Phone.",
            "maxLength": 50
          },
          "CardOwnerIdentityNumber": {
            "type": "string",
            "description": "Card Owner identity Number",
            "maxLength": 50
          },
          "NumOfPayments": {
            "type": "integer",
            "description": "number of payments for the deal"
          },
          "CardYear": {
            "type": "integer",
            "description": "Card expiration year.",
            "format": "int32"
          },
          "CardMonth": {
            "type": "integer",
            "description": "card expiration month.",
            "format": "int32"
          },
          "CustomFields": {
            "type": "array",
            "description": "Custome Fields values that were sent alongside the deal.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "IsAbroadCard": {
            "type": "boolean",
            "description": "boolean - is the card from isreal or is it a tourist card"
          }
        }
      },
      "DocumentInfo": {
        "type": "object",
        "description": "Document create response",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode"
          },
          "DocumentType": {
            "description": "document type that was created",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DocumentType"
              }
            ]
          },
          "DocumentNumber": {
            "type": "integer",
            "description": "Uniqe number for this DocumentType",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Unique account Id in cardcom system",
            "format": "int32"
          },
          "ForeignAccountNumber": {
            "type": "string",
            "description": "Customer accounting number, only if a customer card was created or consolidated.",
            "nullable": true
          },
          "SiteUniqueId": {
            "type": "string",
            "description": "Unique identifier for the site - informative parameter.",
            "nullable": true
          },
          "DocumentUrl": {
            "type": "string",
            "description": "Url to a document (invoice, etc), if created",
            "nullable": true
          }
        }
      },
      "DocumentType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Error",
          "TaxInvoiceAndReceipt",
          "TaxInvoiceAndReceiptRefund",
          "Receipt",
          "ReceiptRefund",
          "Quote",
          "Order",
          "SiteCustomerOrder",
          "SiteCustomerOrderRefund",
          "DeliveryNote",
          "DeliveryNoteRefund",
          "ProformaInvoice",
          "DemandForPayment",
          "DemandForPaymentRefund",
          "TaxInvoice",
          "TaxInvoiceRefund",
          "ReceiptForTaxInvoice",
          "DonationReceipt",
          "DonationReceiptRefund",
          "ReceiptForTaxInvoiceRefund"
        ],
        "enum": [
          "Error",
          "TaxInvoiceAndReceipt",
          "TaxInvoiceAndReceiptRefund",
          "Receipt",
          "ReceiptRefund",
          "Quote",
          "Order",
          "SiteCustomerOrder",
          "SiteCustomerOrderRefund",
          "DeliveryNote",
          "DeliveryNoteRefund",
          "ProformaInvoice",
          "DemandForPayment",
          "DemandForPaymentRefund",
          "TaxInvoice",
          "TaxInvoiceRefund",
          "ReceiptForTaxInvoice",
          "DonationReceipt",
          "DonationReceiptRefund",
          "ReceiptForTaxInvoiceRefund"
        ]
      },
      "TokenInfo": {
        "type": "object",
        "description": "Create token result, You need to save all of the information in the database next to the account, it will be used in the Token charge process",
        "additionalProperties": false,
        "properties": {
          "Token": {
            "type": "string",
            "description": "Credit card token use it for future charges",
            "format": "guid"
          },
          "TokenExDate": {
            "type": "string",
            "description": "The date that the toke will be deleted from CardCom system, yyyyMMdd"
          },
          "CardYear": {
            "type": "integer",
            "description": "card expiration year",
            "format": "int32"
          },
          "CardMonth": {
            "type": "integer",
            "description": "card expiration month",
            "format": "int32"
          },
          "TokenApprovalNumber": {
            "type": "string",
            "description": "Issuer approval number for capture operation"
          },
          "CardOwnerIdentityNumber": {
            "type": "string",
            "description": "card holder identity number"
          }
        }
      },
      "SuspendedInfo": {
        "type": "object",
        "description": "SuspendedDeal result",
        "additionalProperties": false,
        "properties": {
          "SuspendedDealId": {
            "type": "integer",
            "description": "Suspended deal Id, can be charge via API or the admin panel ",
            "format": "int32"
          }
        }
      },
      "TransactionInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equal zero then success , 700 and 701 success for J2 and J5 transaction",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "nullable": true
          },
          "TranzactionId": {
            "type": "integer",
            "description": "The Id of the Credit card Tranzacion",
            "format": "int64"
          },
          "TerminalNumber": {
            "type": "integer",
            "description": "Cardcom terminal number",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Transaction amount",
            "format": "decimal"
          },
          "CoinId": {
            "type": "integer",
            "description": "ISO Coin Code ,1 - ILS, 2 - USD, else ISO Coin from list : https://en.wikipedia.org/wiki/ISO_4217",
            "format": "int32"
          },
          "CouponNumber": {
            "type": "string",
            "description": "Coupon Number - מספר שובר",
            "nullable": true
          },
          "CreateDate": {
            "type": "string",
            "description": "Transaction date",
            "format": "date-time"
          },
          "Last4CardDigits": {
            "type": "integer",
            "description": "The last 4 card digits.",
            "format": "int32"
          },
          "Last4CardDigitsString": {
            "type": "string",
            "description": "The last 4 card digits (string)",
            "nullable": true
          },
          "FirstCardDigits": {
            "type": "integer",
            "description": "The first digits of the credit card.",
            "format": "int64"
          },
          "JParameter": {
            "type": "string",
            "description": "J-parameter, type of test to perform on the card",
            "nullable": true
          },
          "CardMonth": {
            "type": "integer",
            "description": "Credit card Validity Month (MM)"
          },
          "CardYear": {
            "type": "integer",
            "description": "Credit card Validity Month (YY)"
          },
          "ApprovalNumber": {
            "type": "string",
            "description": "Approval Number given by the manufacturer",
            "nullable": true
          },
          "FirstPaymentAmount": {
            "type": "number",
            "description": "First payment amount",
            "format": "decimal"
          },
          "ConstPaymentAmount": {
            "type": "number",
            "description": "Amount of additional payments",
            "format": "decimal"
          },
          "NumberOfPayments": {
            "type": "integer",
            "description": "The number of payments for the deal.",
            "format": "int32"
          },
          "CardInfo": {
            "description": "the card type, from where was it manifactured.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardInfo"
              }
            ]
          },
          "CardOwnerName": {
            "type": "string",
            "description": "card owner name",
            "nullable": true
          },
          "CardOwnerPhone": {
            "type": "string",
            "description": "card owner phone.",
            "nullable": true
          },
          "CardOwnerEmail": {
            "type": "string",
            "description": "the card owner email.",
            "nullable": true
          },
          "CardOwnerIdentityNumber": {
            "type": "string",
            "description": "the card holder identity number.",
            "nullable": true
          },
          "Token": {
            "type": "string",
            "description": "The token number, Eve, will be saved in the database.",
            "format": "guid",
            "nullable": true
          },
          "CardName": {
            "type": "string",
            "description": "Card name for information only",
            "nullable": true
          },
          "SapakMutav": {
            "type": "string",
            "description": "Customer number at work in Rab Benteb",
            "nullable": true
          },
          "Uid": {
            "type": "string",
            "description": "Unique transaction identifier If a credit/cancellation was made from the transaction, the UID will be the same as the original transaction. Otherwise, the UID will be different.",
            "nullable": true
          },
          "ConcentrationNumber": {
            "type": "string",
            "description": "מספר הפקדה / ריכוז",
            "nullable": true
          },
          "DocumentNumber": {
            "type": "integer",
            "description": "Document number",
            "format": "int32",
            "nullable": true
          },
          "DocumentType": {
            "description": "Document DocumentType",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DocumentType"
              }
            ]
          },
          "Rrn": {
            "type": "string",
            "description": "Identification number for credit card companies",
            "nullable": true
          },
          "Brand": {
            "description": "the card brand, vias\\ mastercard \\ dinners \\ americal express.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Brand"
              }
            ]
          },
          "Acquire": {
            "description": "The transaction clearing company",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Acquire"
              }
            ]
          },
          "Issuer": {
            "description": "Who was the card issuer?",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Issuer"
              }
            ]
          },
          "PaymentType": {
            "description": "Credit type - regular debit \\ payment \\ credit \\ discount",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ]
          },
          "CardNumberEntryMode": {
            "description": "where was the deal made? \"Emv\" \\ \"Internet\" \\ \"Phone\"",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardNumberEntryMode"
              }
            ]
          },
          "DealType": {
            "description": "Type + Transaction Source - Cancellation \\ Debit \\ Direct Debit \\ Credit",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DealType"
              }
            ]
          },
          "IsRefund": {
            "type": "boolean",
            "description": "was it a refund deal?"
          },
          "DocumentUrl": {
            "type": "string",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "description": "The custome values that were filled and forwarded",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "IsAbroadCard": {
            "type": "boolean",
            "description": "Is the card from abroad?"
          },
          "IssuerAuthCodeDescription": {
            "type": "string",
            "description": "Issuer authorization code description",
            "nullable": true
          }
        }
      },
      "CardInfo": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Israeli",
          "NonIsraeli",
          "FuelCard",
          "ImmediateChargeCard",
          "GiftCard"
        ],
        "enum": [
          "Israeli",
          "NonIsraeli",
          "FuelCard",
          "ImmediateChargeCard",
          "GiftCard"
        ]
      },
      "Brand": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "PrivateCard",
          "MasterCard",
          "Visa",
          "Maestro",
          "AmericanExpress",
          "Isracard",
          "JBC",
          "Discover",
          "Diners"
        ],
        "enum": [
          "PrivateCard",
          "MasterCard",
          "Visa",
          "Maestro",
          "AmericanExpress",
          "Isracard",
          "JBC",
          "Discover",
          "Diners"
        ]
      },
      "Acquire": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Isracard",
          "CAL",
          "Diners",
          "AmericanExpress",
          "Laumicard",
          "CardCom",
          "PayPal",
          "Upay",
          "PayMe"
        ],
        "enum": [
          "Unknown",
          "Isracard",
          "CAL",
          "Diners",
          "AmericanExpress",
          "Laumicard",
          "CardCom",
          "PayPal",
          "Upay",
          "PayMe"
        ]
      },
      "Issuer": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NonIsrael",
          "Isracard",
          "CAL",
          "Diners",
          "AmericanExpress",
          "JCB",
          "Laumicard"
        ],
        "enum": [
          "NonIsrael",
          "Isracard",
          "CAL",
          "Diners",
          "AmericanExpress",
          "JCB",
          "Laumicard"
        ]
      },
      "PaymentType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Standard",
          "SpecialCredits",
          "ImmediateCharge",
          "CreditClub",
          "SuperCredit",
          "InstallmentCredit",
          "Payments",
          "ClubPatments"
        ],
        "enum": [
          "Unknown",
          "Standard",
          "SpecialCredits",
          "ImmediateCharge",
          "CreditClub",
          "SuperCredit",
          "InstallmentCredit",
          "Payments",
          "ClubPatments"
        ]
      },
      "CardNumberEntryMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "MagneticStip",
          "SelfService",
          "GasStationSelfService",
          "Contactless",
          "EmvContactless",
          "MobileContactless",
          "EmvMobileContactless",
          "MobileNumber",
          "Emv",
          "Phone",
          "SignatureOnly",
          "Internet",
          "Fallback",
          "EmptyCandidateList"
        ],
        "enum": [
          "MagneticStip",
          "SelfService",
          "GasStationSelfService",
          "Contactless",
          "EmvContactless",
          "MobileContactless",
          "EmvMobileContactless",
          "MobileNumber",
          "Emv",
          "Phone",
          "SignatureOnly",
          "Internet",
          "Fallback",
          "EmptyCandidateList"
        ]
      },
      "DealType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Information",
          "Debit",
          "Discharge",
          "ForcedCharge",
          "CashBack",
          "CashTransaction",
          "Recurring",
          "BalanceQuery",
          "Cancel",
          "Refund",
          "Recharge"
        ],
        "enum": [
          "Information",
          "Debit",
          "Discharge",
          "ForcedCharge",
          "CashBack",
          "CashTransaction",
          "Recurring",
          "BalanceQuery",
          "Cancel",
          "Refund",
          "Recharge"
        ]
      },
      "GetLowProfileResult": {
        "type": "object",
        "description": "Get iframe \\ redirect result",
        "additionalProperties": false,
        "required": [
          "TerminalNumber",
          "ApiName",
          "LowProfileId"
        ],
        "properties": {
          "TerminalNumber": {
            "type": "integer",
            "description": "Cardcom terminal number",
            "format": "int32"
          },
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "LowProfileId": {
            "type": "string",
            "description": "The unique Id of the low profile transaction",
            "format": "guid",
            "minLength": 1
          }
        }
      },
      "DtoResponseOfMuhlafimData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Code": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Content": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MuhlafimData"
              }
            ]
          }
        }
      },
      "MuhlafimData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Data": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Data"
            }
          }
        }
      },
      "Data": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "MuhlafID": {
            "type": "integer",
            "format": "int64"
          },
          "EntryType": {
            "type": "integer",
            "format": "int32"
          },
          "EntryNumber": {
            "type": "integer",
            "format": "int32"
          },
          "SapakNumber": {
            "type": "integer",
            "format": "int32"
          },
          "OldCreditNumber": {
            "type": "string",
            "nullable": true
          },
          "NewCreditNumber": {
            "type": "string",
            "nullable": true
          },
          "ReportCode": {
            "description": "Report Code ,1 - New Credit Card, 2 - Card was canceled – no new number issued, 3 - CHB, 4 - Card was canceled – no new number issued , 5 - Card Unfreeze",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReportCodes"
              }
            ]
          },
          "NewCardExpirationDate": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ReportCodes": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "NewCardNumber_1",
          "CardCanceled_2",
          "ChargeBack_3",
          "DealCanceledByCardOwner_4",
          "ReactivateCard_5"
        ],
        "enum": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "GetMuhlafimRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "SupplierUserName",
          "Secret",
          "DateFrom",
          "DateTo",
          "CompanyNumber",
          "Certification"
        ],
        "properties": {
          "SupplierUserName": {
            "type": "string",
            "description": "Supplier Username",
            "minLength": 1
          },
          "Secret": {
            "type": "string",
            "description": "Secret Key or Password",
            "minLength": 1
          },
          "DateFrom": {
            "type": "string",
            "description": "Start Date",
            "format": "date-time",
            "minLength": 1
          },
          "DateTo": {
            "type": "string",
            "description": "End Date",
            "format": "date-time",
            "minLength": 1
          },
          "CompanyNumber": {
            "type": "integer",
            "description": "Company Identification Number",
            "format": "int32"
          },
          "Certification": {
            "type": "string",
            "description": "Certificate or Credential",
            "minLength": 1
          }
        }
      },
      "ExtGetRecurringPaymentRsp": {
        "type": "object",
        "description": "List of Recurring Payments",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "Response code , if it equel to zero than all is OK , else error see Description",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description for errors only",
            "nullable": true
          },
          "UpdateList": {
            "type": "array",
            "description": "Recurring Payments list",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExtRecurringPaymentsRsp"
            }
          }
        }
      },
      "ExtRecurringPaymentsRsp": {
        "type": "object",
        "description": "Recurring Payment info",
        "additionalProperties": false,
        "properties": {
          "RecurringId": {
            "type": "integer",
            "description": "Cardcom for Recurring Id",
            "format": "int32",
            "nullable": true
          },
          "InternalDecription": {
            "type": "string",
            "description": "private description - not shown to card holder",
            "nullable": true
          },
          "NextDateToBill": {
            "type": "string",
            "description": "next billing date",
            "format": "date-time"
          },
          "TotalNumOfBills": {
            "type": "integer",
            "description": "total num of charges to do",
            "format": "int32"
          },
          "NumOfPaymentsAlreadyCharged": {
            "type": "integer",
            "description": "num of payments already charged",
            "format": "int32",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "is recurring is active and will be chanrge",
            "nullable": true
          },
          "ChargeIntervals": {
            "description": "the chanrge intervals, will be add to NextDateToBill (day, month , year) ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ExtTimeIntervalRsp"
              }
            ]
          },
          "FinalDebitCoinId": {
            "type": "integer",
            "description": "currency to charge , 1- NIS , 2 - USD , else iso currency table",
            "format": "int32"
          },
          "IsDocumentCreate": {
            "type": "boolean",
            "description": "crate a document for the charge",
            "nullable": true
          },
          "DocTypeToCreate": {
            "type": "integer",
            "description": "the doc type that will be created , 0 for auto",
            "format": "int32",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "private comment - not shown to card holder",
            "nullable": true
          },
          "IsPrintNumOfPayments": {
            "type": "boolean",
            "description": "add num of payments on the item descriptin in the document, add : (TotalNumOfBills of NumOfPaymentsAlreadyCharged )"
          },
          "IsPrintBillMonth": {
            "type": "boolean",
            "description": "add the month of the 'NextDateToBill' to the item description"
          },
          "DepartmentId": {
            "type": "integer",
            "description": "department id - for reports"
          },
          "UserId": {
            "type": "integer",
            "description": "use id - that create the recurring",
            "format": "int32"
          },
          "ReturnValue": {
            "type": "string",
            "description": "custom value used for api ",
            "nullable": true
          },
          "ChargeInTerminal": {
            "type": "integer",
            "description": "termianl number to charge ",
            "format": "int32",
            "nullable": true
          },
          "FlexItem": {
            "description": "amount to charge, only if IsByProducts==false ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ExtFlexibleItemRsp"
              }
            ]
          },
          "IsByProducts": {
            "type": "boolean",
            "description": "if true then ProdList is used to calculate cost , if flase then FlexItem is used to calculate cost "
          },
          "ProdList": {
            "type": "array",
            "description": "list of prod to change , and amount will be taken for the system products table, only if IsByProducts==true ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExtProductRsp"
            }
          }
        }
      },
      "ExtTimeIntervalRsp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TimeIntervalId": {
            "type": "integer"
          },
          "AddDays": {
            "type": "integer",
            "format": "int32"
          },
          "AddWeeks": {
            "type": "integer",
            "format": "int32"
          },
          "AddMonth": {
            "type": "integer",
            "format": "int32"
          },
          "AddYears": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExtFlexibleItemRsp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DocumentLineDesc": {
            "type": "string",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "format": "decimal"
          },
          "IsPriceIncludeVat": {
            "type": "boolean"
          },
          "ProductId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ExtProductRsp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ProductId": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "RecurringPaymentQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "apiUserName": {
            "type": "string",
            "description": "API User Name",
            "nullable": true
          },
          "apiPassword": {
            "type": "string",
            "description": "API Password",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "RecurringId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ExtGetRecurringPaymentHistoryRsp": {
        "type": "object",
        "description": "List of Recurring Payments",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "Response code , if it equel to zero than all is OK , else error see Description",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description for errors only",
            "nullable": true
          },
          "RecurringPaymentHistory": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RecurringPaymentHistory"
            }
          }
        }
      },
      "RecurringPaymentHistory": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "RowID": {
            "type": "integer",
            "description": "uniq id (per company)",
            "format": "int32"
          },
          "RecurringId": {
            "type": "integer",
            "description": "Cardcom for parent Recurring Id",
            "format": "int32"
          },
          "TerminalNumber": {
            "type": "integer",
            "format": "int32"
          },
          "AccountID": {
            "type": "integer",
            "format": "int32"
          },
          "DocumentDescription": {
            "type": "string",
            "nullable": true
          },
          "LastDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "OriginalNextDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "FinalDebitCoinID": {
            "type": "integer",
            "format": "int32"
          },
          "SumToBill": {
            "type": "number",
            "description": "The sum that was Billed",
            "format": "decimal"
          },
          "SumToBillNoVat": {
            "type": "number",
            "format": "decimal"
          },
          "DepartmentID": {
            "type": "integer"
          },
          "IsDocumentCreate": {
            "type": "boolean"
          },
          "AgentID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "PaymentNum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IsReNewOrder": {
            "type": "boolean"
          },
          "ProductID": {
            "type": "string",
            "nullable": true
          },
          "TranzactionId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "ResposeCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProcessID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DocumentType": {
            "type": "integer",
            "nullable": true
          },
          "DocumentNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "decimal"
          },
          "UnitPrice": {
            "type": "number",
            "format": "decimal"
          },
          "UnitPriceNoVAT": {
            "type": "number",
            "format": "decimal"
          },
          "IsIncludesVAT": {
            "type": "boolean"
          },
          "VAT": {
            "type": "number",
            "format": "decimal"
          },
          "BillingAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "format": "date-time"
          },
          "ActualBillingType": {
            "type": "integer",
            "description": "0 - Bank , 1 - Credit Card , 2 - Retainer"
          },
          "NumOfCreditPayments": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "description": "SUCCESSFUL , PENDINGFORPROCESSING , DEBTAUTOBILLING , LOSTDEBT , PAYBYOTHERE  , ONHOLD , UNKNOWN + (error Code)",
            "nullable": true
          }
        }
      },
      "RecurringPaymentHistoryQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "apiUserName": {
            "type": "string",
            "description": "API User Name",
            "nullable": true
          },
          "apiPassword": {
            "type": "string",
            "description": "API Password",
            "nullable": true
          },
          "RowId": {
            "type": "integer",
            "description": "RowId for history",
            "format": "int32",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "AccountId for history not req if you send RowId",
            "format": "int32",
            "nullable": true
          },
          "FromDate": {
            "type": "string",
            "description": "FromDate CreateDate , format  DDMMYYYY , req only if AccountId is sent",
            "nullable": true
          },
          "ToDate": {
            "type": "string",
            "description": "ToDate CreateDate , format DDMMYYYY , req only if AccountId is sent",
            "nullable": true
          },
          "FilterBy": {
            "description": "type of operation to perform",
            "default": "CreateDate",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterBy"
              }
            ]
          }
        }
      },
      "FilterBy": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "CreateDate",
          "LastUpdateDate"
        ],
        "enum": [
          "CreateDate",
          "LastUpdateDate"
        ]
      },
      "ExtGetListOfFilesRsp": {
        "type": "object",
        "description": "List of new Token to update",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "Response code , if it equel to zero than all is OK , else error see Description",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description for errors only",
            "nullable": true
          },
          "UpdateList": {
            "type": "array",
            "description": "Tokens list",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExtUpdateTokens"
            }
          }
        }
      },
      "ExtUpdateTokens": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ID": {
            "type": "integer",
            "description": "Prosses ID",
            "format": "int32"
          },
          "UpdatedTokenList": {
            "type": "array",
            "description": "list of update tokens",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExUpdatTokesProsses"
            }
          }
        }
      },
      "ExUpdatTokesProsses": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ID": {
            "type": "integer",
            "format": "int32"
          },
          "ExcelRow": {
            "type": "integer",
            "description": "The row number of this work",
            "format": "int32"
          },
          "OriginalStatus": {
            "type": "string",
            "description": "information only , original code of the acquiring",
            "nullable": true
          },
          "Status": {
            "type": "integer",
            "description": "1- New card number , 2- the Card was canceled, there is no new Card Number , 3 - charge back , 4 - card owner ask to cancel deal",
            "format": "int32"
          },
          "Token": {
            "type": "string",
            "nullable": true
          },
          "NewExpirationDateYYYY": {
            "type": "string",
            "nullable": true
          },
          "NewExpirationDateMM": {
            "type": "string",
            "nullable": true
          },
          "Last4Digits": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MuhlafimByDateRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "apiUserName",
          "apiPassword",
          "fromDate",
          "toDate"
        ],
        "properties": {
          "apiUserName": {
            "type": "string",
            "description": "API username",
            "minLength": 1
          },
          "apiPassword": {
            "type": "string",
            "description": "API password",
            "minLength": 1
          },
          "fromDate": {
            "type": "string",
            "description": "DateTime from",
            "format": "date-time",
            "minLength": 1
          },
          "toDate": {
            "type": "string",
            "description": "DateTime to",
            "format": "date-time",
            "minLength": 1
          }
        }
      },
      "ExtIsBankNumberValidRsp": {
        "type": "object",
        "description": "Is Bank valid",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "Response code , if it equel to zero than all is OK , else error see Description",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description for errors only",
            "nullable": true
          }
        }
      },
      "IsBankNumberValidReq": {
        "type": "object",
        "description": "Is Bank valid",
        "additionalProperties": false,
        "properties": {
          "apiUserName": {
            "type": "string",
            "description": "API User Name",
            "nullable": true
          },
          "apiPassword": {
            "type": "string",
            "description": "API Password",
            "nullable": true
          },
          "Bank": {
            "type": "integer",
            "description": "Bank number",
            "format": "int32"
          },
          "Snif": {
            "type": "integer",
            "description": "Snif",
            "format": "int32"
          },
          "Account": {
            "type": "string",
            "description": "Bank Account number",
            "nullable": true
          }
        }
      },
      "ChangeStatusForHistoryRecurringToIrrevocableReqest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ApiUserName": {
            "type": "string",
            "description": "API User Name",
            "nullable": true
          },
          "ApiPassword": {
            "type": "string",
            "description": "API Password",
            "nullable": true
          },
          "RowID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChangeTo": {
            "description": "ProcessId value to be updated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RecurringStatus"
              }
            ]
          }
        }
      },
      "RecurringStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "DebtForTracking",
          "NoOtherPaymentMethod",
          "BadDebt"
        ],
        "enum": [
          "DebtForTracking",
          "NoOtherPaymentMethod",
          "BadDebt"
        ]
      },
      "GetAccountByIdResponse": {
        "type": "object",
        "description": "get account by id response",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "Account": {
            "description": "Account inforamtion",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Account"
              }
            ]
          }
        }
      },
      "Account": {
        "type": "object",
        "description": "Account data",
        "additionalProperties": false,
        "required": [
          "Name"
        ],
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Unique account Id in cardcom system, account must exist in CardCom system ",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Account Company name of last name",
            "maxLength": 50,
            "minLength": 1
          },
          "FirstName": {
            "type": "string",
            "description": "customer first name",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "Business registration number or user Identity number",
            "maxLength": 50,
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "Customer City",
            "maxLength": 50,
            "nullable": true
          },
          "AddressLine1": {
            "type": "string",
            "description": "Address Line 1",
            "maxLength": 50,
            "nullable": true
          },
          "AddressLine2": {
            "type": "string",
            "description": "Address Line 2",
            "maxLength": 50,
            "nullable": true
          },
          "Mobile": {
            "type": "string",
            "description": "Mobile phone number",
            "maxLength": 50,
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "description": "Land line phone number",
            "maxLength": 50,
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "customer email",
            "maxLength": 50,
            "nullable": true
          },
          "IsVatFree": {
            "type": "boolean",
            "description": "Is the client is VAT Free?",
            "default": false,
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "customer zip code.",
            "maxLength": 50,
            "nullable": true
          },
          "PoBox": {
            "type": "string",
            "description": "mail box.",
            "maxLength": 50,
            "nullable": true
          },
          "Fax": {
            "type": "string",
            "description": "customer fax",
            "maxLength": 50,
            "nullable": true
          },
          "OpenDate": {
            "type": "string",
            "description": "when was the customer opened in the system.",
            "format": "date-time",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "Comments on the customer.",
            "maxLength": 250,
            "nullable": true
          },
          "AccountForeignKey": {
            "type": "string",
            "description": "The account number on a Foreign system, use for transfer to 3-party account system ( hashavshevet, SAP )",
            "maxLength": 50,
            "nullable": true
          },
          "SiteUniqueId": {
            "type": "string",
            "description": "Your system unique Id for this account",
            "maxLength": 50,
            "nullable": true
          },
          "ContactName": {
            "type": "string",
            "description": "contact person name",
            "maxLength": 50,
            "nullable": true
          },
          "ISOCoinId": {
            "type": "integer",
            "description": "Default coin to use in the UI manual document creation",
            "format": "int32",
            "default": 0
          },
          "Balance": {
            "type": "number",
            "description": "The balance on the customer card.",
            "format": "decimal"
          },
          "OpeningBalance": {
            "type": "number",
            "description": "Opening balance on a customer card.",
            "format": "decimal"
          }
        }
      },
      "GetAccountById": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "AccountId"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id to query",
            "format": "int32"
          }
        }
      },
      "GetTranzactionsResp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "Tranzactions": {
            "type": "array",
            "description": "Tranzactions",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TransactionInfo"
            }
          },
          "Page": {
            "type": "integer",
            "format": "int32"
          },
          "Page_size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ListTransactionsReq": {
        "type": "object",
        "description": "list transactions request",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "FromDate",
          "ToDate",
          "Page",
          "Page_size"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "FromDate": {
            "type": "string",
            "description": "Form Date DDMMYYYY",
            "minLength": 1
          },
          "ToDate": {
            "type": "string",
            "description": "To Date DDMMYYYY",
            "minLength": 1
          },
          "TranStatus": {
            "description": "status of transaction to return , default - Completed",
            "default": "Success",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ListTransactionStatus"
              }
            ]
          },
          "Page": {
            "type": "integer",
            "description": "page from 1",
            "format": "int32"
          },
          "Page_size": {
            "type": "integer",
            "description": "page size 10 - 2000",
            "format": "int32"
          },
          "LimitForTerminal": {
            "type": "integer",
            "description": "return only transaction for a specific terminal in this company",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ListTransactionStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Success",
          "All",
          "Failure"
        ],
        "enum": [
          "Success",
          "All",
          "Failure"
        ]
      },
      "ExtShvaParams": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "HaveRecipient": {
            "type": "boolean"
          },
          "Status1": {
            "type": "integer",
            "format": "int32"
          },
          "CardNumber5": {
            "type": "string",
            "nullable": true
          },
          "Sulac25": {
            "type": "string",
            "nullable": true
          },
          "JParameter29": {
            "type": "string",
            "nullable": true
          },
          "Tokef30": {
            "type": "string",
            "nullable": true
          },
          "Sum36": {
            "type": "integer",
            "format": "int32"
          },
          "SumStars52": {
            "type": "string",
            "nullable": true
          },
          "ApprovalNumber71": {
            "type": "string",
            "nullable": true
          },
          "FirstPaymentSum78": {
            "type": "string",
            "nullable": true
          },
          "ConstPayment86": {
            "type": "string",
            "nullable": true
          },
          "NumberOfPayments94": {
            "type": "string",
            "nullable": true
          },
          "AbroadCard119": {
            "type": "string",
            "nullable": true
          },
          "CardTypeCode60": {
            "type": "string",
            "nullable": true
          },
          "Mutag24": {
            "type": "string",
            "nullable": true
          },
          "CardOwnerName": {
            "type": "string",
            "nullable": true
          },
          "CardToken": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "CardHolderIdentityNumber": {
            "type": "string",
            "nullable": true
          },
          "CardName": {
            "type": "string",
            "nullable": true
          },
          "CreditType63": {
            "type": "string",
            "nullable": true
          },
          "DealType61": {
            "type": "string",
            "nullable": true
          },
          "ChargType66": {
            "type": "string",
            "nullable": true
          },
          "SapakMutav": {
            "type": "string",
            "nullable": true
          },
          "BinId": {
            "type": "integer",
            "format": "int32"
          },
          "DealDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExternalPaymentVector": {
            "type": "integer",
            "nullable": true
          },
          "ExternalPaymentID": {
            "type": "string",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "TerminalNumber": {
            "type": "integer",
            "format": "int32"
          },
          "InternalDealNumber": {
            "type": "integer",
            "format": "int64"
          },
          "CouponNumber": {
            "type": "string",
            "nullable": true
          },
          "CardOwnerPhone": {
            "type": "string",
            "nullable": true
          },
          "FirstCardDigits": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "Uid": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TransactionInfoRequest": {
        "type": "object",
        "description": "Get transaction info request",
        "additionalProperties": false,
        "required": [
          "TerminalNumber",
          "UserName",
          "UserPassword",
          "InternalDealNumber"
        ],
        "properties": {
          "TerminalNumber": {
            "type": "integer",
            "description": "Terminal Number for authentication",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "description": "API Name for authentication",
            "minLength": 1
          },
          "UserPassword": {
            "type": "string",
            "description": "API Password for authentication",
            "minLength": 1
          },
          "InternalDealNumber": {
            "type": "integer",
            "description": "InternalDealNumber to search",
            "format": "int64"
          }
        }
      },
      "TransactionReq": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "TerminalNumber",
          "ApiName",
          "Amount"
        ],
        "properties": {
          "TerminalNumber": {
            "type": "integer",
            "description": "Cardcom terminal number",
            "format": "int32"
          },
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "Amount": {
            "type": "number",
            "description": "Amount of transaction",
            "format": "decimal"
          },
          "CardNumber": {
            "type": "string",
            "description": "credit Card number",
            "nullable": true
          },
          "Token": {
            "type": "string",
            "description": "credit Card token",
            "format": "guid",
            "nullable": true
          },
          "ExternalMerchantId": {
            "type": "string",
            "description": "External Merchant Id",
            "nullable": true
          },
          "CardExpirationMMYY": {
            "type": "string",
            "description": "credit Card Expiration date ",
            "nullable": true
          },
          "CVV2": {
            "type": "string",
            "description": "credit Card CVV ",
            "nullable": true
          },
          "ExternalUniqTranId": {
            "type": "string",
            "description": "External Uniq Tran Id , send your uniq trnasaction id to prevent duplication of transaction. if the same ExternalUniqTranId will be send you will receive and error code 608. see 'ExternalUniqUniqTranIdResponse' ",
            "nullable": true
          },
          "ExternalUniqUniqTranIdResponse": {
            "type": "boolean",
            "description": "External Uniq Tran Id , send your uniq trnasaction id to prevent duplication of transaction. if the same ExternalUniqTranId will be send you will receive and error code 608. see 'ExternalUniqUniqTranIdResponse' ",
            "default": false,
            "nullable": true
          },
          "NumOfPayments": {
            "type": "integer",
            "description": "Maximum number of payment to show to card holder , default 1",
            "format": "int32",
            "default": 1,
            "maximum": 36.0,
            "minimum": 1.0,
            "nullable": true
          },
          "CardOwnerInformation": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardOwnerInformation"
              }
            ]
          },
          "ISOCoinId": {
            "type": "integer",
            "description": "ISO Coin Code ,1 - ILS, 2 - USD, else ISO Coin from list : https://en.wikipedia.org/wiki/ISO_4217",
            "format": "int32",
            "default": 1,
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "description": "Fill the value of CustomFields information",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "Advanced": {
            "description": "Advanced transaction options",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AdvancedTran"
              }
            ]
          },
          "Document": {
            "description": "Document information , will create document if transaction succeeded",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DocumentTran"
              }
            ]
          }
        }
      },
      "CardOwnerInformation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Phone": {
            "type": "string",
            "nullable": true
          },
          "FullName": {
            "type": "string",
            "nullable": true
          },
          "IdentityNumber": {
            "type": "string",
            "description": "credit card owner identity number for israel cards only",
            "nullable": true
          },
          "CardOwnerEmail": {
            "type": "string",
            "nullable": true
          },
          "AvsZip": {
            "type": "string",
            "nullable": true
          },
          "AvsAddress": {
            "type": "string",
            "nullable": true
          },
          "AvsCity": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AdvancedTran": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ApiPassword": {
            "type": "string",
            "description": "Required only if 'IsRefund' is true",
            "nullable": true
          },
          "IsRefund": {
            "type": "boolean",
            "description": "Is refund transaction , 'ApiPassword' is Required to use this option"
          },
          "ISOCoinName": {
            "type": "string",
            "description": "ISO name (alternative and override to 'IsoCoinId'). ISO Coin Name from list : https://en.wikipedia.org/wiki/ISO_4217",
            "maxLength": 3,
            "nullable": true
          },
          "JValidateType": {
            "description": "Type of transaction for credit card in operation : CreateTokenOnly or Suspended deal, can be J2 (simple card validation) or J5 (authoriz)",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/JValidateType"
              }
            ]
          },
          "SapakMutav": {
            "type": "string",
            "description": "SapakMutav number, for meaged terminals",
            "maxLength": 15,
            "nullable": true
          },
          "CreditType": {
            "type": "integer",
            "description": "Type of credit for the card, for israel cards only.",
            "default": 1,
            "nullable": true
          },
          "MTI": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AccountIdToGetCardNumber": {
            "type": "integer",
            "description": "Get the card number and expiretion date from account , if you need the account informatin for the invoice you need send the account Id in the document object : Document.AdvancedDefinition.AccountID and Document.AdvancedDefinition.IsLoadInfoFromAccountID=true",
            "format": "int32",
            "nullable": true
          },
          "ApprovalNumber": {
            "type": "string",
            "description": "capture an J5 (authoriz) request ",
            "nullable": true
          },
          "FirstPayment": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "ConstPayment": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "IsAutoRecurringPayment": {
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "IsCreateToken": {
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "SendNote": {
            "type": "boolean",
            "default": false,
            "nullable": true
          }
        }
      },
      "DocumentTran": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocumentBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ManualNumber": {
                "type": "string",
                "description": "Manual numbering of the document. Special permission must be requested to use this parameter.",
                "nullable": true
              },
              "DocumentDateDDMMYYYY": {
                "type": "string",
                "description": "Document production date.",
                "nullable": true
              },
              "ValueDate": {
                "type": "string",
                "description": "Document value date (for journal entries)",
                "nullable": true
              },
              "Languge": {
                "type": "string",
                "description": "document languge: \"he\" / \"en\" / \"ru\" / \"ar\" / \"fr\" / \"it\"",
                "nullable": true
              },
              "IsSendSMS": {
                "type": "boolean",
                "description": "should the system send the document via SMS (only with the SMS module)",
                "default": true,
                "nullable": true
              }
            }
          }
        ]
      },
      "RefundByTransactionIdResp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "NewTranzactionId": {
            "type": "integer",
            "description": "refund transaction id ",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "RefundByTransactionIdReq": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "TransactionId"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "TransactionId": {
            "type": "integer",
            "description": "The Id for refund",
            "format": "int64"
          },
          "ExternalDealId": {
            "type": "string",
            "description": "External deal Id (parameter shopify)",
            "nullable": true
          },
          "ExternalMerchantId": {
            "type": "string",
            "description": "External Merchant Id (parameter shopify)",
            "nullable": true
          },
          "PartialSum": {
            "type": "number",
            "description": "Partial Sum for refund",
            "format": "decimal",
            "nullable": true
          },
          "CancelOnly": {
            "type": "boolean",
            "description": "Cancellation only, before deposit of the transaction",
            "default": false,
            "nullable": true
          },
          "SapakMutav": {
            "type": "string",
            "description": "override original transaction SapalMutav value",
            "nullable": true
          },
          "AllowMultipleRefunds": {
            "type": "boolean",
            "description": "Allow Multiple Refunds on the same transaction",
            "default": false,
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "description": "Custom Fields",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        }
      },
      "SpecialTransactionsResp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "SpecialTransactions": {
            "type": "array",
            "description": "SpecialTransactions",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SpecialTransactionsInfo"
            }
          }
        }
      },
      "SpecialTransactionsInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "row Create Date",
            "format": "date-time"
          },
          "SpecialType": {
            "type": "integer",
            "description": "Special transaction type ",
            "format": "int32"
          },
          "SpecialTypeDesc": {
            "type": "string",
            "description": "Special transaction heb desctiption "
          },
          "SpecialTypeSubType": {
            "type": "integer",
            "description": "sub code for transaction type "
          },
          "Description": {
            "type": "string",
            "description": "transaction type and sub type info",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount of this transaction",
            "format": "decimal",
            "nullable": true
          },
          "OriginlTranAmount": {
            "type": "number",
            "description": "Original Amount transaction",
            "format": "decimal",
            "nullable": true
          },
          "ARN": {
            "type": "string",
            "description": "ARN is Solek transaction Id, this is the original ARN and this transaction ARN",
            "nullable": true
          },
          "UID": {
            "type": "string",
            "description": "UID is point of sale transaction Id, this is the original UID and this transaction UID",
            "nullable": true
          },
          "SapakNumber": {
            "type": "integer",
            "description": "The Sapak that will get the Money",
            "format": "int32"
          },
          "TranzactionId": {
            "type": "integer",
            "description": "CardCom point of sale Id",
            "format": "int64",
            "nullable": true
          },
          "Last4CardDigits": {
            "type": "string",
            "nullable": true
          },
          "MarkedAsRead": {
            "type": "boolean",
            "nullable": true
          },
          "CurrencyISO": {
            "type": "integer",
            "nullable": true
          },
          "CardToken": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "OriginlTranDate": {
            "type": "string",
            "description": "Original transaction date - when the card holder did the transaction",
            "format": "date-time",
            "nullable": true
          },
          "SpecialTranDate": {
            "type": "string",
            "description": "This transaction date",
            "format": "date-time",
            "nullable": true
          },
          "SapakMutavNumber": {
            "type": "integer",
            "description": "Mutav number in Meaged style work, information only",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "SpecialTransactionsReq": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "FromDate",
          "ToDate"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "FromDate": {
            "type": "string",
            "description": "Form Date DDMMYYYY",
            "minLength": 1
          },
          "ToDate": {
            "type": "string",
            "description": "To Date DDMMYYYY",
            "minLength": 1
          }
        }
      },
      "GetExternalUniqTranIdStatusReq": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "TerminalNumber",
          "ApiName"
        ],
        "properties": {
          "TerminalNumber": {
            "type": "integer",
            "description": "Cardcom terminal number",
            "format": "int32"
          },
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ExternalUniqTranId": {
            "type": "string",
            "description": "External Uniq Tran Id , send your uniq trnasaction id to prevent duplication of transaction. if the same ExternalUniqTranId will be send you will receive and error code 608. see 'ExternalUniqUniqTranIdResponse' ",
            "nullable": true
          },
          "ExternalMerchantId": {
            "type": "string",
            "description": "External Merchant Id",
            "nullable": true
          }
        }
      },
      "CreateDocumentRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "Document"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "Document": {
            "description": "The document to be created",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Document"
              }
            ]
          },
          "Cash": {
            "type": "number",
            "description": "The amount in cache",
            "format": "decimal"
          },
          "Cheques": {
            "type": "array",
            "description": "Array of cheques",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RciExtCheque"
            }
          },
          "CustomFields": {
            "type": "array",
            "description": "Array of cheques",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RciExtCustome"
            }
          },
          "DealNumbers": {
            "type": "array",
            "description": "Array of cheques",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RciExtDealNum"
            }
          },
          "IsSendSMS": {
            "type": "boolean",
            "description": "Array of cheques"
          }
        }
      },
      "Document": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocumentBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "DocumentTypeToCreate"
            ],
            "properties": {
              "ManualNumber": {
                "type": "string",
                "nullable": true
              },
              "DocumentDate": {
                "type": "string",
                "nullable": true
              },
              "ValueDate": {
                "type": "string",
                "nullable": true
              },
              "ISOCoinID": {
                "type": "integer",
                "description": "ISOCoinID. 1=ILS, 2=USD, the rest as described in ISO. Default is 1",
                "format": "int32"
              },
              "ISOCoinName": {
                "type": "string",
                "description": "ISOCoinName as described in ISO. if ISOCoinID is provided this property is not needed.",
                "nullable": true
              },
              "Languge": {
                "type": "string",
                "description": "Language. 'he' or 'en'. Default is he. When providing AccountID the account language will override this property.",
                "nullable": true
              },
              "DocumentTypeToCreate": {
                "description": "The type of the document",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DocumentToCreate"
                  }
                ]
              }
            }
          }
        ]
      },
      "RciExtCheque": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ChequeNumber": {
            "type": "string",
            "nullable": true
          },
          "BankNumber": {
            "type": "integer",
            "format": "int32"
          },
          "SnifNumber": {
            "type": "integer",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "nullable": true
          },
          "DateCheque": {
            "type": "string",
            "format": "date-time"
          },
          "Sum": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "RciExtCustome": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TransactionID": {
            "type": "integer",
            "format": "int32"
          },
          "TranDate": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "asmacta": {
            "type": "string",
            "nullable": true
          },
          "Sum": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "RciExtDealNum": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DealNumber": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CancelDocResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "NewDocumentNumber": {
            "type": "integer",
            "description": "New document number",
            "format": "int32",
            "nullable": true
          },
          "NewDocumentType": {
            "type": "integer",
            "description": "New document type",
            "format": "int32",
            "nullable": true
          },
          "AccountID": {
            "type": "integer",
            "description": "Account ID",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CancelDocRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "DocumentNumber",
          "DocumentType"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "DocumentNumber": {
            "type": "integer",
            "description": "document number to cancel",
            "format": "int32"
          },
          "DocumentType": {
            "type": "integer",
            "description": "document type to cancel",
            "format": "int32"
          },
          "IsCancelEmailSend": {
            "type": "boolean",
            "description": "Do not send the new cancell document client",
            "default": false
          },
          "IsSendSMS": {
            "type": "boolean",
            "description": "Send sms with link to download document",
            "default": false
          },
          "IsCreditCardCancelOnly": {
            "type": "boolean",
            "description": "Do not cancel document if credit card transaction use deposit to the acquire",
            "default": false
          }
        }
      },
      "SendAllDocumentsToEmailResponse": {
        "type": "object",
        "description": "send pdf documents by email",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          }
        }
      },
      "SendAllDocumentsToEmailRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "EmailTo",
          "FromDateYYYYMMDD",
          "ToDateYYYYMMDD"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "EmailTo": {
            "type": "string",
            "description": "Send to email",
            "minLength": 1
          },
          "FromDateYYYYMMDD": {
            "type": "string",
            "description": "from date",
            "minLength": 1
          },
          "ToDateYYYYMMDD": {
            "type": "string",
            "description": "to date",
            "minLength": 1
          },
          "SendEmptyEmail": {
            "type": "boolean",
            "description": "send empty email if no documents were found",
            "default": false,
            "nullable": true
          },
          "ForceOriginal": {
            "type": "boolean",
            "description": "add original on the document",
            "default": false,
            "nullable": true
          },
          "DocumentType": {
            "type": "integer",
            "description": "document type to send , null or -1 for all , else the doc id",
            "format": "int32",
            "default": -1,
            "nullable": true
          }
        }
      },
      "DocumentSearchResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Documents": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/InvHeadLineDto"
            }
          },
          "Page": {
            "type": "integer",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InvHeadLineDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TotalNoVatNIS": {
            "type": "number",
            "format": "decimal"
          },
          "TotalIncludeVATNIS": {
            "type": "number",
            "format": "decimal"
          },
          "VATOnlyNIS": {
            "type": "number",
            "format": "decimal"
          },
          "TotalVatFreeNIS": {
            "type": "number",
            "format": "decimal"
          },
          "TotalNoVat": {
            "type": "number",
            "format": "decimal"
          },
          "TotalIncludeVAT": {
            "type": "number",
            "format": "decimal"
          },
          "VATOnly": {
            "type": "number",
            "format": "decimal"
          },
          "TotalVatFree": {
            "type": "number",
            "format": "decimal"
          },
          "ISORate": {
            "type": "number",
            "format": "decimal"
          },
          "Cust_City": {
            "type": "string",
            "nullable": true
          },
          "Cust_Addres_Line1": {
            "type": "string",
            "nullable": true
          },
          "Cust_Addres_Line2": {
            "type": "string",
            "nullable": true
          },
          "Cust_LinePH": {
            "type": "string",
            "nullable": true
          },
          "Cust_MobilePH": {
            "type": "string",
            "nullable": true
          },
          "Comp_ID": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "Cust_Name": {
            "type": "string",
            "nullable": true
          },
          "InvoiceDateOnly": {
            "type": "string",
            "format": "date-time"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "Invoice_Number": {
            "type": "integer",
            "format": "int32"
          },
          "InvoiceType": {
            "type": "integer",
            "format": "int32"
          },
          "Terminal_Number": {
            "type": "integer",
            "format": "int32"
          },
          "CoinID": {
            "type": "integer",
            "format": "int32"
          },
          "DepartmentID": {
            "type": "integer",
            "format": "int32"
          },
          "IsOpen": {
            "type": "boolean"
          },
          "ValueDate": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Customer_Number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "group_number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Languge": {
            "type": "string",
            "nullable": true
          },
          "UserComments": {
            "type": "string",
            "nullable": true
          },
          "Discount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "DiscountNIS": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "ValidateItemsisPriceIncludeVat": {
            "type": "boolean",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "ZReport": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Asmachta": {
            "type": "string",
            "nullable": true
          },
          "SumBeforeDiscountNIS": {
            "type": "number",
            "format": "decimal"
          },
          "TotalChashNIS": {
            "type": "number",
            "format": "decimal"
          },
          "TotalChequesNIS": {
            "type": "number",
            "format": "decimal"
          },
          "TotalCreditCardNIS": {
            "type": "number",
            "format": "decimal"
          },
          "TotalCustomeTransactionNIS": {
            "type": "number",
            "format": "decimal"
          },
          "TotalRicipientNIS": {
            "type": "number",
            "format": "decimal"
          },
          "TotalChash": {
            "type": "number",
            "format": "decimal"
          },
          "TotalCheques": {
            "type": "number",
            "format": "decimal"
          },
          "IsNegetive": {
            "type": "boolean"
          },
          "TotalCreditCard": {
            "type": "number",
            "format": "decimal"
          },
          "TotalCustomeTransaction": {
            "type": "number",
            "format": "decimal"
          },
          "TotalRicipient": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "DocumentSearchRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "FromDateYYYYMMDD",
          "ToDateYYYYMMDD"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "FromDateYYYYMMDD": {
            "type": "string",
            "description": "From date",
            "minLength": 1
          },
          "ToDateYYYYMMDD": {
            "type": "string",
            "description": "To date",
            "minLength": 1
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id. Used to filter. Use AccountId OR CusotmerName",
            "format": "int32",
            "nullable": true
          },
          "CusotmerName": {
            "type": "string",
            "description": "Customer Name. Used to filter. Use CusotmerName OR AccountId",
            "nullable": true
          },
          "DocType": {
            "type": "integer",
            "description": "Document Type: -1=All invoices. -2=All documents. -3=Refund only",
            "format": "int32",
            "default": -1
          },
          "CoinId": {
            "type": "integer",
            "description": "Coin Id. 0=All coins. 1=ILS. 2=USD",
            "format": "int32",
            "default": 1,
            "nullable": true
          },
          "OpenClose": {
            "type": "integer",
            "description": "Open or closed documents: 0=all, 1=true, 2=false.",
            "format": "int32",
            "default": 0
          },
          "VatFreeDocOnly": {
            "type": "boolean",
            "description": "VAT free Docs Only",
            "default": false
          },
          "PageNumber": {
            "type": "integer",
            "description": "Pagination: page number. Default 1",
            "format": "int32",
            "default": 1
          },
          "ItemsPerPage": {
            "type": "integer",
            "description": "Pagination: number of documents per page. Default 50. Maximum 200",
            "format": "int32",
            "default": 50
          }
        }
      },
      "CrossDocumentResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CrossDocumentRequest": {
        "type": "object",
        "description": "the From document number",
        "additionalProperties": false,
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication"
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication"
          },
          "FromDocNumber": {
            "type": "integer",
            "description": "the From document number",
            "format": "int32"
          },
          "FromDocType": {
            "type": "integer",
            "description": "the From document number",
            "format": "int32"
          },
          "ToDocumentsList": {
            "type": "array",
            "description": "the From document number",
            "items": {
              "$ref": "#/components/schemas/CrossDocumentToList"
            }
          }
        }
      },
      "CrossDocumentToList": {
        "type": "object",
        "description": "sum to corss , null for full document price",
        "additionalProperties": false,
        "properties": {
          "DocNumber": {
            "type": "integer",
            "format": "int32"
          },
          "DocType": {
            "type": "integer",
            "format": "int32"
          },
          "PartialSumToCorss": {
            "type": "number",
            "description": "sum to corss , null for full document price",
            "format": "decimal",
            "nullable": true
          }
        }
      },
      "InvResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "InvoiceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "InvoiceType": {
            "type": "integer",
            "format": "int32"
          },
          "AccountID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CardSaved": {
            "type": "boolean"
          },
          "EmailSendWasQueued": {
            "type": "boolean",
            "nullable": true
          },
          "InvoiceLink": {
            "type": "string",
            "nullable": true
          },
          "TaxAuthorityAllocationNumber": {
            "type": "string",
            "nullable": true
          },
          "PaymentLink": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateTaxInvoiceRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "InvoiceType": {
            "type": "integer",
            "description": "Invoice Type",
            "format": "int32"
          },
          "InvoiceHead": {
            "description": "Invoice header",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/InvExtHead"
              }
            ]
          },
          "InvoiceLines": {
            "type": "array",
            "description": "Invoice lines",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/InvExtHeadLines"
            }
          },
          "Cash": {
            "type": "number",
            "description": "Amount in cash",
            "format": "decimal"
          },
          "CustomLines": {
            "type": "array",
            "description": "Custom line",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RciExtCustome"
            }
          },
          "Cheques": {
            "type": "array",
            "description": "Cheques",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RciExtCheque"
            }
          },
          "DealNumbers": {
            "type": "array",
            "description": "Deal Numbers",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RciExtDealNum"
            }
          }
        }
      },
      "InvExtHead": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CustName": {
            "type": "string",
            "nullable": true
          },
          "CustAddresLine1": {
            "type": "string",
            "nullable": true
          },
          "CustAddresLine2": {
            "type": "string",
            "nullable": true
          },
          "CustCity": {
            "type": "string",
            "nullable": true
          },
          "CustLinePH": {
            "type": "string",
            "nullable": true
          },
          "CustMobilePH": {
            "type": "string",
            "nullable": true
          },
          "CompID": {
            "type": "string",
            "nullable": true
          },
          "Language": {
            "type": "string",
            "nullable": true
          },
          "Languge": {
            "type": "string",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "nullable": true
          },
          "CoinID": {
            "type": "integer",
            "format": "int32"
          },
          "CoinIsoName": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "SendByEmail": {
            "type": "boolean"
          },
          "ExtIsVatFree": {
            "type": "boolean",
            "nullable": true
          },
          "ManualInvoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "DepartmentId": {
            "type": "string",
            "nullable": true
          },
          "DepartmentIdShort": {
            "type": "integer"
          },
          "IsLoadInfoFromAccountID": {
            "type": "string",
            "nullable": true
          },
          "IsAutoCreateUpdateAccount": {
            "type": "string",
            "nullable": true
          },
          "AccountForeignKey": {
            "type": "string",
            "nullable": true
          },
          "SiteUniqueId": {
            "type": "string",
            "nullable": true
          },
          "DeliveryName": {
            "type": "string",
            "nullable": true
          },
          "InvDate": {
            "type": "string",
            "nullable": true
          },
          "ValueDate": {
            "type": "string",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "AccountID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "InvExtHeadLines": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "decimal"
          },
          "IsPriceIncludeVAT": {
            "type": "boolean"
          },
          "IsVatFree": {
            "type": "string",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "format": "decimal"
          },
          "ProductID": {
            "type": "string",
            "nullable": true
          },
          "TotalLineCost": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GetDocumentUrlResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "DocUrl": {
            "type": "string",
            "description": "URL to the requested document",
            "nullable": true
          }
        }
      },
      "GetDocumentRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "DocumentType",
          "DocumentNumber"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "DocumentType": {
            "description": "Document Type. Note \"Auto\" type is not acceptable in this method.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DocumentToCreate"
              }
            ]
          },
          "DocumentNumber": {
            "type": "integer",
            "description": "Document Number",
            "format": "int32"
          }
        }
      },
      "RSContent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          {
            "type": "object",
            "description": "error information for non http status 200",
            "additionalProperties": false,
            "properties": {
              "DocumentsErrorResults": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/CompanyOperationsError"
                }
              },
              "KycErrorResults": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/CompanyOperationsError"
                }
              },
              "CompanyErrorResults": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/CompanyOperationsError"
                }
              },
              "UserErrorResults": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/CompanyOperationsError"
                }
              },
              "CompanyInternalID": {
                "type": "string",
                "format": "guid",
                "nullable": true
              },
              "TerminalNumber": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "APIUserName": {
                "type": "string",
                "nullable": true
              },
              "APISecret": {
                "type": "string",
                "nullable": true
              },
              "ModulesList": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "Request": {
                "$ref": "#/components/schemas/HttpStatusCode"
              },
              "IsDone": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "CompanyOperationsError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "PropertyName": {
            "type": "string",
            "nullable": true
          },
          "Response": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "HttpStatusCode": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Continue",
          "SwitchingProtocols",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultipleChoices",
          "Ambiguous",
          "MovedPermanently",
          "Moved",
          "Found",
          "Redirect",
          "SeeOther",
          "RedirectMethod",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "RedirectKeepVerb",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "UpgradeRequired",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported"
        ],
        "enum": [
          100,
          101,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          300,
          300,
          301,
          301,
          302,
          302,
          303,
          303,
          304,
          305,
          306,
          307,
          307,
          400,
          401,
          402,
          403,
          404,
          405,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          415,
          416,
          417,
          426,
          500,
          501,
          502,
          503,
          504,
          505
        ]
      },
      "OpenNewCompanyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenNewCompanyResp"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "CardComSapakNumber": {
                "type": "string",
                "nullable": true
              },
              "CompanyNumber": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "OpenNewCompanyResp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "CompanyInternalID": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "TerminalNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "APIUserName": {
            "type": "string",
            "nullable": true
          },
          "APISecret": {
            "type": "string",
            "nullable": true
          },
          "ModulesList": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "UpayAPIKey": {
            "type": "string",
            "nullable": true
          },
          "ShowErrorToEndUser": {
            "type": "boolean"
          },
          "CardComSapakNumber": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AcquiredCompanyAccountFileUpload": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "SupplierUserName",
          "SupplierPassword",
          "Secret",
          "CompanyInternalID"
        ],
        "properties": {
          "DocumentsInfo": {
            "type": "array",
            "description": "Document for upload",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DocumentsInfo"
            }
          },
          "SupplierUserName": {
            "type": "string",
            "description": "SupplierUserName",
            "minLength": 1
          },
          "SupplierPassword": {
            "type": "string",
            "description": "SupplierPassword",
            "minLength": 1
          },
          "Secret": {
            "type": "string",
            "description": "Secret",
            "minLength": 1
          },
          "CompanyInternalID": {
            "type": "string",
            "description": "CompanyInternalID",
            "format": "guid",
            "minLength": 1
          }
        }
      },
      "DocumentsInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "DocType",
          "Name",
          "Content"
        ],
        "properties": {
          "DocType": {
            "description": "Document Type",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DocType"
              }
            ]
          },
          "Name": {
            "type": "string",
            "description": "Name",
            "minLength": 1
          },
          "Content": {
            "type": "string",
            "description": "Content",
            "format": "byte",
            "minLength": 1
          }
        }
      },
      "DocType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Id",
          "Passport",
          "CertificateOfIncorporation",
          "BankConfirmationOrPhotocopyOfCheck",
          "AttorneysApprovalForAGovernmentCompany",
          "AuthorizedAsAuthorizedToSign",
          "AttorneysProtocolAuthorizedToSign",
          "BookkeepingAuthorization",
          "AnotherCertificateForAForeignResident",
          "LicenseWorkPermitCertificateForABusiness",
          "DeclarationOfBeneficiaries",
          "ADocumentIndicatingTheCorrectAddressOfTheCompany",
          "FaceToFaceRecognitionVideoFile"
        ],
        "enum": [
          "Id",
          "Passport",
          "CertificateOfIncorporation",
          "BankConfirmationOrPhotocopyOfCheck",
          "AttorneysApprovalForAGovernmentCompany",
          "AuthorizedAsAuthorizedToSign",
          "AttorneysProtocolAuthorizedToSign",
          "BookkeepingAuthorization",
          "AnotherCertificateForAForeignResident",
          "LicenseWorkPermitCertificateForABusiness",
          "DeclarationOfBeneficiaries",
          "ADocumentIndicatingTheCorrectAddressOfTheCompany",
          "FaceToFaceRecognitionVideoFile"
        ]
      },
      "AcquiredCompanyAccountWithDocuments": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DocumentsInfos": {
            "type": "array",
            "description": "Document object",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DocumentsInfo"
            }
          },
          "AcquiredCompanyAccount": {
            "description": "General info object",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AcquiredCompanyAccount"
              }
            ]
          }
        }
      },
      "AcquiredCompanyAccount": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "SupplierUserName",
          "SupplierPassword",
          "Secret"
        ],
        "properties": {
          "SupplierUserName": {
            "type": "string",
            "description": "SupplierUserName",
            "minLength": 1
          },
          "SupplierPassword": {
            "type": "string",
            "description": "SupplierPassword",
            "minLength": 1
          },
          "Secret": {
            "type": "string",
            "description": "Secret",
            "minLength": 1
          },
          "CompanyInfo": {
            "description": "Company info",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyInfo"
              }
            ]
          },
          "UserInfo": {
            "description": "User info",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserInfo"
              }
            ]
          },
          "TerminalInfo": {
            "description": "Terminal info",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TerminalInfo"
              }
            ]
          },
          "KycInfo": {
            "description": "Kyc info",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/KycInfo"
              }
            ]
          }
        }
      },
      "CompanyInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "BusinessRegistrationNumber",
          "Name"
        ],
        "properties": {
          "Activity": {
            "type": "string",
            "description": "Business Activity",
            "nullable": true
          },
          "BusinessRegistrationNumber": {
            "type": "string",
            "description": "Id Business Number",
            "minLength": 1
          },
          "ContactPerson": {
            "type": "string",
            "description": "Contact Name",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Company email",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Company name mandatory field",
            "minLength": 1
          },
          "Fax": {
            "type": "string",
            "description": "Fax",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Phone - mandatory if there is no mobile phone",
            "nullable": true
          },
          "MobilePhone": {
            "type": "string",
            "description": "Mobile phone - mandatory if there is no phone number",
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code",
            "nullable": true
          },
          "IsVatFreeCompany": {
            "type": "boolean",
            "description": "Is vat free company (N.P.O)"
          },
          "Citizenship": {
            "default": "Israel",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Citizenship"
              }
            ]
          },
          "CompanyInternalID": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "NameEng": {
            "title": "Business name in English",
            "type": "string",
            "description": "Business name in English",
            "nullable": true
          },
          "CityCode": {
            "title": "City code",
            "type": "integer",
            "description": "City code - get list of cities from https://secure.cardcom.solutions/api/v11/CompanyOperations/GetCities",
            "format": "int32",
            "nullable": true
          },
          "StreetCode": {
            "title": "Street code",
            "type": "integer",
            "description": "Street code - get list of streets from https://secure.cardcom.solutions/api/v11/CompanyOperations/GetStreets by city code",
            "format": "int32",
            "nullable": true
          },
          "HouseNumber": {
            "title": "House number",
            "type": "string",
            "description": "House number",
            "nullable": true
          },
          "WebSiteUrl": {
            "title": "Website Address",
            "type": "string",
            "description": "Website Address",
            "nullable": true
          },
          "Entrance": {
            "title": "Entrance",
            "type": "string",
            "description": "Entrance",
            "maxLength": 10,
            "minLength": 0,
            "nullable": true
          },
          "CountryCode": {
            "title": "Country",
            "type": "integer",
            "description": "Country - get list of Countries from https://secure.cardcom.solutions/api/v11/CompanyOperations/GetCountries  for example israel code 376\"",
            "format": "int32"
          },
          "NameLegalCorporation": {
            "title": "Name legal corporation",
            "type": "string",
            "description": "Name legal corporation",
            "nullable": true
          },
          "AgreementInfo": {
            "title": "agreement number",
            "description": "agreement number",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ExtSlikaAggrement"
              }
            ]
          }
        }
      },
      "Citizenship": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Israel",
          "Expatriate",
          "ResidentArea"
        ],
        "enum": [
          "Unknown",
          "Israel",
          "Expatriate",
          "ResidentArea"
        ]
      },
      "ExtSlikaAggrement": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "AgreementId": {
            "title": "agreement Id",
            "type": "integer",
            "description": "agreement Id",
            "format": "int32"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "IdentityNumber",
          "LogInName"
        ],
        "properties": {
          "StreetCode": {
            "type": "integer",
            "description": "Street code - get list of streets from https://secure.cardcom.solutions/api/v11/CompanyOperations/GetStreets by city code",
            "format": "int32"
          },
          "CityCode": {
            "type": "integer",
            "description": "City code - get list of cities from https://secure.cardcom.solutions/api/v11/CompanyOperations/GetCities",
            "format": "int32"
          },
          "Email": {
            "type": "string",
            "description": "Email",
            "nullable": true
          },
          "IdentityNumber": {
            "type": "string",
            "description": "Identity number",
            "minLength": 1
          },
          "LogInName": {
            "type": "string",
            "maxLength": 250,
            "minLength": 7
          },
          "LogInPassword": {
            "type": "string",
            "minLength": 7,
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "First Name",
            "nullable": true
          },
          "Fax": {
            "type": "string",
            "description": "Fax",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "MobilePhone": {
            "type": "string",
            "description": "Mobile phone",
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "Zip code",
            "nullable": true
          },
          "LastName": {
            "title": "Last Name",
            "type": "string",
            "description": "Last Name",
            "nullable": true
          },
          "BirthDate": {
            "title": "Birth date",
            "type": "string",
            "description": "Birth Date yyyy-MM-dd, Must be older than 18",
            "nullable": true
          },
          "Gender": {
            "title": "Sex",
            "description": "Sex",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Gender"
              }
            ]
          },
          "IdentityIssueDate": {
            "title": "Issue date of identity or passport yyyy-MM-dd",
            "type": "string",
            "description": "Issue date of identity or passport yyyy-MM-dd",
            "nullable": true
          },
          "PassportIssueCountryCode": {
            "title": "Passport Issue Country Code",
            "type": "integer",
            "description": "Passport Issue Country Code - get from API http://localhost:61240/api/v11/CompanyOperations/GetCountries",
            "format": "int32",
            "maximum": 999.0,
            "minimum": 1.0
          },
          "IdIssueDateOrPassportIDTypes": {
            "title": "ID type, passports or IssueDate",
            "description": "IdIssueDateOrPassportIDTypes",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HumanIDTypes"
              }
            ]
          },
          "PersonalIdentificationCode": {
            "type": "string",
            "description": "Personal identification code",
            "maxLength": 20,
            "nullable": true
          }
        }
      },
      "Gender": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "male",
          "female"
        ],
        "enum": [
          "Unknown",
          "male",
          "female"
        ]
      },
      "HumanIDTypes": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "IDNumber",
          "Passport"
        ],
        "enum": [
          "IDNumber",
          "Passport"
        ]
      },
      "TerminalInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "BankCode": {
            "type": "string",
            "description": "Bank code - get list of banks from https://secure.cardcom.solutions/api/v11/CompanyOperations/GetBanks",
            "nullable": true
          },
          "BankBranchCode": {
            "type": "string",
            "description": "Bank branch code -  - get list of bank branches from https://secure.cardcom.solutions/api/v11/CompanyOperations/GetBanksBranches by bank number",
            "nullable": true
          },
          "BankAccountNumber": {
            "type": "string",
            "description": "Bank account number",
            "nullable": true
          },
          "ModuleList": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ModuleType"
            }
          }
        }
      },
      "ModuleType": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ModuleID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "KycInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "KycInfoGeneric": {
            "description": "פרמטרים שמתאימים לכל",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/KycInfoGeneric"
              }
            ]
          },
          "KycInfoOsekMurshe": {
            "description": "פרמטרים שמתאימים לעוסק מורשה",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/KycInfoOsekMurshe"
              }
            ]
          }
        }
      },
      "KycInfoGeneric": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CountriesTargetedMarket": {
            "type": "string",
            "description": "טקסט חופשי עד 250 תווים, עבור איזה מדינות המוצר מיועד",
            "maxLength": 250,
            "nullable": true
          },
          "NamesOfRelatedBusinesses": {
            "type": "string",
            "description": "טקסט חופשי עד 250 תווים, רשימת העסקים הקשורים – המשך לשדה הקודם במידה וסימנו בו TRUE",
            "maxLength": 250,
            "nullable": true
          },
          "ExpectedPercentagePaymentOfOnePayment": {
            "type": "number",
            "description": "אחוז עיסקאות צפוי של תשלום אחד",
            "format": "decimal",
            "nullable": true
          },
          "ExpectedPercentageOfPaymentTransactions": {
            "type": "number",
            "description": "אחוז עיסקאות צפוי של עיסקאות תשלומים",
            "format": "decimal",
            "nullable": true
          },
          "ExpectedPercentageOfCreditPaymentTransactions": {
            "type": "number",
            "description": "אחוז עיסקאות צפוי של תשלומי קרדיט",
            "format": "decimal",
            "nullable": true
          },
          "ExpectedPercentageOfTouristTransactions": {
            "type": "number",
            "description": "אחוז עיסקאות צפוי של עיסקאות תייר",
            "format": "decimal",
            "nullable": true
          },
          "ExpectedPaymentNumberForAverageTransaction": {
            "type": "integer",
            "description": "הצפי לעיסקה ממוצעת מבחינת מספר תשלומים. שדה שמקבל מספר שלם",
            "nullable": true
          },
          "SalePlatform": {
            "description": "באיזה פלטפורמה המכירה צפויה להתבצע - לא בשימוש\r\nשדה שמקבל מספר שלם\r\n",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SalePlatform"
              }
            ]
          },
          "SalePlatforms": {
            "type": "array",
            "description": "באיזה פלטפורמה המכירה צפויה להתבצע - לא בשימוש\r\nשדה שמקבל מספר שלם\r\n",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SalePlatform2"
            }
          },
          "IsPaymentsFacilitator": {
            "type": "boolean",
            "description": "ריכוז חיובים של ספקים אחרים – האם הלקוח הוא לקוח מאגד",
            "nullable": true
          },
          "IsBusinessFacilitateCashWithdrawls": {
            "type": "boolean",
            "description": "האם הלקוח מאפשר משיכת מזומן בקופה?",
            "nullable": true
          },
          "IsBusinessFacilitateVoucherOrRechargingCardsSales": {
            "type": "boolean",
            "description": "האם הלקוח מאפשר מכירת שוברים/כרטיסים נטענים/כרטיסי מתנה?",
            "nullable": true
          },
          "IsBusinessFacilitateCreditForTransactionsOutsideBusinessScope": {
            "type": "boolean",
            "description": "האם הלקוח נותן אשראי שלא למטרת קנייה בחנות?",
            "nullable": true
          },
          "IsBusinessPlaceCashRegistersInOtherBusinesses": {
            "type": "boolean",
            "description": "הצבת קופות בבתי עסק אחרים?",
            "nullable": true
          },
          "TypeOfPlannedService": {
            "type": "string",
            "description": "מה הוא סוג השירות המתוכנן?",
            "maxLength": 250,
            "nullable": true
          },
          "MinimumAmountOfCreditTransaction": {
            "type": "integer",
            "description": "מהו הסכום המינימלי לעיסקה בכרטיס אשראי?",
            "format": "int32",
            "nullable": true
          },
          "MaximumAmountOfCreditTransaction": {
            "type": "integer",
            "description": "מהו הסכום המקסימלי לעיסקה בכרטיס אשראי? ",
            "format": "int32",
            "nullable": true
          },
          "IsTheBusinessSeasonal": {
            "type": "boolean",
            "description": "האם העסק בעיקר פועל בעונה מסויימת של השנה?",
            "nullable": true
          },
          "IsTheBusinessPreviouslyClearedCreditCards": {
            "type": "boolean",
            "description": "האם העסק סלק בעבר כרטיסי אשראי ?",
            "nullable": true
          },
          "NumberOfYearsBusinessHasInClrearance": {
            "type": "integer",
            "description": "כמה שנות ניסיון יש לעסק בתחום הסליקה?",
            "nullable": true
          },
          "ExpectedStoreSupplyDeliverySchedule": {
            "description": "משך זמן האספקה הצפוי למוצרי החנות?",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ExpectedStoreSupplyDeliverySchedule"
              }
            ]
          },
          "TimeTillProductShips": {
            "type": "integer",
            "description": "משך זמן האספקה הצפוי למשלוח?",
            "nullable": true
          },
          "AvarageTransactionAmountInCreditCard": {
            "type": "integer",
            "description": "מהו הסכום הממוצע לעיסקה בכרטיס אשראי? ",
            "format": "int32",
            "nullable": true
          },
          "EstimatedMonthlyTransactionAmount": {
            "type": "integer",
            "description": "מספר עסקאות חודשי משוער",
            "format": "int32",
            "nullable": true
          },
          "IsBusinessBeenDeniedActionVersusBankingCorporation": {
            "type": "boolean",
            "description": "האם בית עסק סורב בעבר לפעילות אל מול תאגיד בנקאי",
            "nullable": true
          },
          "GeneralBusinessFieldMccCode": {
            "type": "integer",
            "description": "תחום עיסוק כללי",
            "format": "int32",
            "nullable": true
          },
          "SpecifiedBusinessFieldMccCode": {
            "type": "integer",
            "description": "תחום עיסוק מפורט",
            "format": "int32",
            "nullable": true
          },
          "TypeOfRecruitment": {
            "description": "דרך הגיוס",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TypeOfRecruitment"
              }
            ]
          }
        }
      },
      "SalePlatform": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "PhysicalSale",
          "Phone",
          "Web",
          "LandingPage"
        ],
        "enum": [
          "PhysicalSale",
          "Phone",
          "Web",
          "LandingPage"
        ]
      },
      "SalePlatform2": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "PhysicalSale",
          "Phone",
          "Web",
          "LandingPage"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "ExpectedStoreSupplyDeliverySchedule": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Immediate",
          "Late",
          "Continuous"
        ],
        "enum": [
          "Immediate",
          "Late",
          "Continuous"
        ]
      },
      "TypeOfRecruitment": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Independent",
          "Telephone",
          "UsingARemoteRepresentative"
        ],
        "enum": [
          "Independent",
          "Telephone",
          "UsingARemoteRepresentative"
        ]
      },
      "KycInfoOsekMurshe": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "IsOwnerAddressDifferentFromBusinessAddress": {
            "type": "boolean",
            "description": "האם כתובת המגורים של הבעלים שונה מכתובת העסק",
            "nullable": true
          },
          "BusinessOwnerHomeNumber": {
            "type": "string",
            "description": "מספר הבית בכתובת המגורים של בעל בית העסק",
            "maxLength": 10,
            "nullable": true
          },
          "BusinessOwnerEntranceNumber": {
            "type": "string",
            "description": "כניסה בכתובת המגורים של בעל בית העסק",
            "maxLength": 10,
            "nullable": true
          },
          "BusinessOwnerStreetCode": {
            "type": "integer",
            "description": "קוד רחוב בכתובת המגורים של בעל בית העסק",
            "format": "int32",
            "nullable": true
          },
          "BusinessOwnerCityCode": {
            "type": "integer",
            "description": "קוד עיר בכתובת המגורים של בעל בית העסק",
            "format": "int32",
            "nullable": true
          },
          "BusinessOwnerZipCode": {
            "type": "string",
            "description": "מיקוד בכתובת המגורים של בעל בית העסק",
            "maxLength": 250,
            "nullable": true
          },
          "MotherMaidenName": {
            "type": "string",
            "description": "שם משפחה של האם לפני הנישואין",
            "maxLength": 50,
            "nullable": true
          }
        }
      },
      "DataGov_CityCodes": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "CodeCity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "City": {
            "type": "string",
            "nullable": true
          },
          "CityEng": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DataGov_StreetCodes": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "CodeStreet": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Street": {
            "type": "string",
            "nullable": true
          },
          "CityCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "StreetEng": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CountriesISO": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CountryCode": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "NameHeb": {
            "type": "string",
            "nullable": true
          },
          "Alpha_2": {
            "type": "string",
            "nullable": true
          },
          "Alpha_3": {
            "type": "string",
            "nullable": true
          },
          "Iso_3166_2": {
            "type": "string",
            "nullable": true
          },
          "Region": {
            "type": "string",
            "nullable": true
          },
          "SubRegion": {
            "type": "string",
            "nullable": true
          },
          "IntermediateRegion": {
            "type": "string",
            "nullable": true
          },
          "RegionCode": {
            "type": "string",
            "nullable": true
          },
          "SubRegionCode": {
            "type": "string",
            "nullable": true
          },
          "IntermediateRegionCode": {
            "type": "string",
            "nullable": true
          },
          "BDI_CountryCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Banks": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Bank_Code": {
            "type": "integer",
            "format": "int32"
          },
          "Bank_Name": {
            "type": "string",
            "nullable": true
          },
          "IsMasavDigitalVerificationSupported": {
            "type": "boolean"
          },
          "BanksBranches": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BanksBranches"
            }
          }
        }
      },
      "BanksBranches": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Bank_Code": {
            "type": "integer",
            "format": "int32"
          },
          "Branch_Code": {
            "type": "integer",
            "format": "int32"
          },
          "Branch_Name": {
            "type": "string",
            "nullable": true
          },
          "Branch_Address": {
            "type": "string",
            "nullable": true
          },
          "Banks": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Banks"
              }
            ]
          }
        }
      },
      "MCC_DBs_MAIN": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "MCC_Code_MainClassification": {
            "type": "integer"
          },
          "MCC_Description_MainClassification": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MCC_DBs": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "MCC_CardCom": {
            "type": "integer",
            "format": "int32"
          },
          "MCC_Code_Local": {
            "type": "integer"
          },
          "MCC_Code_Master": {
            "type": "integer"
          },
          "MCC_Code_Visa": {
            "type": "integer"
          },
          "MCC_Description": {
            "type": "string",
            "nullable": true
          },
          "MCC_Code_MainClassification": {
            "type": "integer"
          },
          "MCC_Description_MainClassification": {
            "type": "string",
            "nullable": true
          },
          "PriorApprovalForRecruitingABusinessRiskManagement": {
            "type": "boolean"
          },
          "RecruitmentRouteType": {
            "type": "integer",
            "format": "int32"
          },
          "ATouristMissingDocument": {
            "type": "boolean"
          },
          "MissingDocumentStatusDefault": {
            "type": "boolean"
          },
          "RiskLevel": {
            "type": "integer"
          }
        }
      },
      "OpenMeagedResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "SapakStatus": {
            "description": "SapakNumber stats",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SapakStatus"
              }
            ]
          },
          "SapakNumber": {
            "type": "integer",
            "description": "Sapak Number for compoany",
            "format": "int32",
            "nullable": true
          },
          "IsDevError": {
            "type": "boolean",
            "description": "Developer Error See InputErrorDescription for information, do not show this to the end user"
          },
          "IsInputError": {
            "type": "boolean",
            "description": "Is one of the input values is invalid"
          },
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "nullable": true
          },
          "InputErrorPropName": {
            "type": "string",
            "description": "for the developer to know what porp is invalid ",
            "nullable": true
          }
        }
      },
      "SapakStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "UnderTest",
          "InProcess",
          "Approved",
          "Blocked",
          "Error"
        ],
        "enum": [
          "UnderTest",
          "InProcess",
          "Approved",
          "Blocked",
          "Error"
        ]
      },
      "MeagedOpenRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "IsValidationOnly",
          "SupplierUserName",
          "Secret",
          "CompnayInfo",
          "PeopleInfo",
          "KycInfo"
        ],
        "properties": {
          "IsValidationOnly": {
            "type": "boolean",
            "description": "Do only validation for the recquest and do not open a new company! for Dev-test only"
          },
          "SupplierUserName": {
            "type": "string",
            "description": "Supplier User Name",
            "minLength": 1
          },
          "Secret": {
            "type": "string",
            "description": "Supplier Secret",
            "minLength": 1
          },
          "CompnayInfo": {
            "$ref": "#/components/schemas/MeagedCompanyInfo"
          },
          "PeopleInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeagedPeopleInfo"
            }
          },
          "KycInfo": {
            "$ref": "#/components/schemas/MeagedKycInfo"
          }
        }
      },
      "MeagedCompanyInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "BusinessRegistrationNumber",
          "NameLegalCorporation",
          "NameLegalCorporationEng",
          "Email",
          "PhoneNumber1",
          "ZipCode",
          "CityCode",
          "StreetCode"
        ],
        "properties": {
          "BusinessRegistrationNumber": {
            "type": "integer",
            "format": "int64"
          },
          "NameLegalCorporation": {
            "type": "string",
            "description": "Legal Corporation name",
            "minLength": 1
          },
          "NameLegalCorporationEng": {
            "type": "string",
            "description": "Legal Corporation name in english",
            "minLength": 1
          },
          "Email": {
            "type": "string",
            "minLength": 1
          },
          "AdvertisingSapakName": {
            "type": "string",
            "description": "Company name that will show to the card hulder (if different from Leagal Name)",
            "nullable": true
          },
          "AdvertisingSapakEngName": {
            "type": "string",
            "description": "Company name that will show to the card hulder (if different from Leagal Name) in english",
            "nullable": true
          },
          "PhoneNumber1": {
            "type": "string",
            "minLength": 1
          },
          "PhoneNumber2": {
            "type": "string",
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "minLength": 1
          },
          "CityCode": {
            "type": "integer",
            "format": "int32"
          },
          "StreetCode": {
            "type": "integer",
            "format": "int32"
          },
          "HouseNumber": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MeagedPeopleInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "RelationType",
          "IdentityNumber",
          "IdentityIssueDate_DDMMYYYY",
          "IdentityExpireDate_DDMMYYYY",
          "BirthDate_DDMMYYYY",
          "Gender",
          "FirstName",
          "LastName",
          "StreetCode",
          "CityCode",
          "PhoneNumber1"
        ],
        "properties": {
          "RelationType": {
            "$ref": "#/components/schemas/Relations"
          },
          "IdentityNumber": {
            "type": "integer",
            "format": "int32"
          },
          "IdentityIssueDate_DDMMYYYY": {
            "type": "string",
            "minLength": 1
          },
          "IdentityExpireDate_DDMMYYYY": {
            "type": "string",
            "minLength": 1
          },
          "BirthDate_DDMMYYYY": {
            "type": "string",
            "minLength": 1
          },
          "Gender": {
            "description": "1 - male , 2 - female",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Gender2"
              }
            ]
          },
          "FirstName": {
            "type": "string",
            "minLength": 1
          },
          "LastName": {
            "type": "string",
            "minLength": 1
          },
          "ResedentialCountryCode": {
            "type": "string",
            "nullable": true
          },
          "StreetCode": {
            "type": "integer",
            "format": "int32"
          },
          "CityCode": {
            "type": "integer",
            "format": "int32"
          },
          "ZipCode": {
            "type": "string",
            "nullable": true
          },
          "HouseNumber": {
            "type": "string",
            "nullable": true
          },
          "PhoneNumber1": {
            "type": "string",
            "minLength": 1
          },
          "PhoneNumber2": {
            "type": "string",
            "nullable": true
          },
          "Fax": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Relations": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AuthorizedSignature",
          "AuthorizedSignatureForeignResident"
        ],
        "enum": [
          "AuthorizedSignature",
          "AuthorizedSignatureForeignResident"
        ]
      },
      "Gender2": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "male",
          "female"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "MeagedKycInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Mcc",
          "MaxNumberOfPayments"
        ],
        "properties": {
          "Mcc": {
            "type": "integer",
            "description": "MCC_CardCom",
            "format": "int32"
          },
          "MaxNumberOfPayments": {
            "type": "number",
            "format": "decimal"
          },
          "ElectronicCommerceUrl": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SapakStatusChangeNotify": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "SapakNumber": {
            "type": "integer",
            "format": "int32"
          },
          "SapakStatus": {
            "$ref": "#/components/schemas/SapakStatus"
          }
        }
      },
      "MeagedGetCompanyInfoResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "nullable": true
          },
          "MeagedSapakInfo": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MeagedSapakInfo"
            }
          }
        }
      },
      "MeagedSapakInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "SapakNumber": {
            "type": "integer",
            "format": "int32"
          },
          "SapakStatus": {
            "$ref": "#/components/schemas/SapakStatus"
          }
        }
      },
      "MeagedGetCompanyInfoReuqest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "SupplierUserName",
          "Secret"
        ],
        "properties": {
          "SupplierUserName": {
            "type": "string",
            "description": "Supplier User Name",
            "minLength": 1
          },
          "Secret": {
            "type": "string",
            "description": "Supplier Secret",
            "minLength": 1
          },
          "BusinessRegistrationNumber": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "SapakNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CreditCardTransactionsResp": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Page",
          "Page_size"
        ],
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "Page": {
            "type": "integer",
            "description": "page, from 1",
            "format": "int32"
          },
          "Page_size": {
            "type": "integer",
            "description": "page size, 10 - 2000",
            "format": "int32"
          },
          "CreditCardTransactions": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CreditCardTransaction"
            }
          }
        }
      },
      "CreditCardTransaction": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CreateDate": {
            "type": "string",
            "format": "date-time"
          },
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "SapakNumber": {
            "type": "integer",
            "description": "The Sapak that will get the Money",
            "format": "int32",
            "nullable": true
          },
          "ARN": {
            "type": "string",
            "nullable": true
          },
          "TransacDate": {
            "type": "string",
            "format": "date-time"
          },
          "TransacTime": {
            "type": "string",
            "format": "duration"
          },
          "TransmissionDate": {
            "type": "string",
            "format": "date-time"
          },
          "TransmissionTime": {
            "type": "string",
            "format": "duration"
          },
          "TranType": {
            "$ref": "#/components/schemas/TranType"
          },
          "Rrn": {
            "type": "string",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "format": "decimal"
          },
          "FirstPayment": {
            "type": "number",
            "format": "decimal"
          },
          "NotFirstPayment": {
            "type": "number",
            "format": "decimal"
          },
          "NoPayments": {
            "type": "integer",
            "format": "int32"
          },
          "IndexPayment": {
            "type": "integer"
          },
          "Agg_PayDay": {
            "type": "string",
            "format": "date-time"
          },
          "Agg_IfPac": {
            "type": "number",
            "format": "decimal"
          },
          "ActionCode": {
            "$ref": "#/components/schemas/ActionCode"
          },
          "Last4Digits": {
            "type": "integer",
            "nullable": true
          },
          "Last4DigitsStr": {
            "type": "string",
            "description": "String representation of Last4Digits. Prevents zeros from being omitted.",
            "nullable": true
          },
          "First7Digits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Uid": {
            "type": "string",
            "nullable": true
          },
          "Mti": {
            "$ref": "#/components/schemas/MTI"
          },
          "SessionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "CouponNumber": {
            "type": "string",
            "nullable": true
          },
          "AuthorizeNo": {
            "type": "string",
            "nullable": true
          },
          "Retailer": {
            "type": "integer",
            "format": "int32"
          },
          "Brand": {
            "$ref": "#/components/schemas/Brand2"
          },
          "Agg_IfPctFixAmt": {
            "type": "number",
            "format": "decimal"
          },
          "OriginCurrency": {
            "type": "integer"
          },
          "PaymentCurrency": {
            "type": "integer"
          },
          "SapakMutavNumber": {
            "type": "integer",
            "description": "Mutav number in Meaged style work, information only",
            "format": "int32"
          },
          "Eci": {
            "description": "Secure transaction indicator",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EciType"
              }
            ]
          }
        }
      },
      "TranType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Info_0",
          "Charge_1",
          "Prika_2",
          "Meulachet_3",
          "Cashback_6",
          "Cash_7",
          "DirectDebite_11",
          "ManualCashDisbursement_12",
          "Yitra_30",
          "Refund_53",
          "Recharge_55"
        ],
        "enum": [
          "Info_0",
          "Charge_1",
          "Prika_2",
          "Meulachet_3",
          "Cashback_6",
          "Cash_7",
          "DirectDebite_11",
          "ManualCashDisbursement_12",
          "Yitra_30",
          "Refund_53",
          "Recharge_55"
        ]
      },
      "ActionCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NoActionCode",
          "Purchase_1",
          "Return_6",
          "FeeCharge_10",
          "CloseTXNReturn_11",
          "CHB_15",
          "CHBNoMerchandis_19",
          "FeeChargeReturn_20",
          "CloseTXN_21",
          "HOLD_24",
          "Cancel_25",
          "RevCHB_35",
          "Rep_45",
          "OriginalRequest_51",
          "CopyRequest_52",
          "CHB2_65",
          "CHB2NoMerchandi_69",
          "RevCHB2_75",
          "BlockedCard_90",
          "NEW_ISSUER_NOTIFY_ISSUANCE_CARD_91",
          "OLD_ISSUER_RESPONSE_FOR_NOTIFY_92",
          "FRAUD_93",
          "CANCEL_STANDING_ORDER_94",
          "CHANGE_CARD_STANDING_ORDER_95",
          "ISSUER_CANCEL_STANDING_ORDER_96",
          "RESUME_CARD_97",
          "CHANGE_NOT_ACTIVATED_CARD_98",
          "CBH_SECOND_FULL_205",
          "CBH_SECOND_PARTIAL_282",
          "CBH_FIRST_FULL_450",
          "CBH_FIRST_FULL_451",
          "CBH_FIRST_PARTIAL_453",
          "CBH_FIRST_PARTIAL_454",
          "PrePayment_1001",
          "PrePaymentFutureDebts_1002",
          "CHBCommition_1003",
          "CancelMTI520Commition_1004",
          "RefundAC6Commition_1005",
          "NotUsedRefundsSum_2001",
          "GetMoneyFromMerchant_2002",
          "FixVat_2003",
          "InternalTransactionRecalc_9001"
        ],
        "enum": [
          "NoActionCode",
          "Purchase_1",
          "Return_6",
          "FeeCharge_10",
          "CloseTXNReturn_11",
          "CHB_15",
          "CHBNoMerchandis_19",
          "FeeChargeReturn_20",
          "CloseTXN_21",
          "HOLD_24",
          "Cancel_25",
          "RevCHB_35",
          "Rep_45",
          "OriginalRequest_51",
          "CopyRequest_52",
          "CHB2_65",
          "CHB2NoMerchandi_69",
          "RevCHB2_75",
          "BlockedCard_90",
          "NEW_ISSUER_NOTIFY_ISSUANCE_CARD_91",
          "OLD_ISSUER_RESPONSE_FOR_NOTIFY_92",
          "FRAUD_93",
          "CANCEL_STANDING_ORDER_94",
          "CHANGE_CARD_STANDING_ORDER_95",
          "ISSUER_CANCEL_STANDING_ORDER_96",
          "RESUME_CARD_97",
          "CHANGE_NOT_ACTIVATED_CARD_98",
          "CBH_SECOND_FULL_205",
          "CBH_SECOND_PARTIAL_282",
          "CBH_FIRST_FULL_450",
          "CBH_FIRST_FULL_451",
          "CBH_FIRST_PARTIAL_453",
          "CBH_FIRST_PARTIAL_454",
          "PrePayment_1001",
          "PrePaymentFutureDebts_1002",
          "CHBCommition_1003",
          "CancelMTI520Commition_1004",
          "RefundAC6Commition_1005",
          "NotUsedRefundsSum_2001",
          "GetMoneyFromMerchant_2002",
          "FixVat_2003",
          "InternalTransactionRecalc_9001"
        ]
      },
      "MTI": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Request_100",
          "RequestRepeat_101",
          "ResponseToRequest_110",
          "RequestCancel_400",
          "ResponseToRequestCancel_410",
          "RequestReversal",
          "ResponseToRequestReversal_430",
          "CreditCardCharge_500",
          "CreditRefund_520",
          "Info_540",
          "RequestNetwork_800",
          "ResponseNetwork_810"
        ],
        "enum": [
          "Request_100",
          "RequestRepeat_101",
          "ResponseToRequest_110",
          "RequestCancel_400",
          "ResponseToRequestCancel_410",
          "RequestReversal",
          "ResponseToRequestReversal_430",
          "CreditCardCharge_500",
          "CreditRefund_520",
          "Info_540",
          "RequestNetwork_800",
          "ResponseNetwork_810"
        ]
      },
      "Brand2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "MasterCard_1",
          "Visa_2",
          "Diners_3",
          "Amex_4",
          "Isracard_5"
        ],
        "enum": [
          "MasterCard_1",
          "Visa_2",
          "Diners_3",
          "Amex_4",
          "Isracard_5"
        ]
      },
      "EciType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Empty",
          "NoCavvUcaf",
          "CavvUcafNotIssuer",
          "CavvUcaf"
        ],
        "enum": [
          "Empty",
          "NoCavvUcaf",
          "CavvUcafNotIssuer",
          "CavvUcaf"
        ]
      },
      "CreditCardTransactionsReq": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "FromCreateDate",
          "ToCreateDate",
          "Page",
          "Page_size"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "FromCreateDate": {
            "type": "string",
            "description": "Form Create Date DDMMYYYY",
            "minLength": 1
          },
          "ToCreateDate": {
            "type": "string",
            "description": "To Create Date DDMMYYYY",
            "minLength": 1
          },
          "Page": {
            "type": "integer",
            "description": "page,  from 1",
            "format": "int32"
          },
          "Page_size": {
            "type": "integer",
            "description": "page size, 10 - 2000",
            "format": "int32"
          }
        }
      },
      "CreditCardTransactionsHaltedResp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "CreditCardTransactions": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CreditCardTransaction"
            }
          }
        }
      },
      "CreditCardTransactionsHaltedReq": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          }
        }
      },
      "FinancialTransactionsResp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "Page": {
            "type": "integer",
            "format": "int32"
          },
          "Page_size": {
            "type": "integer",
            "format": "int32"
          },
          "FinancialTransactions": {
            "type": "array",
            "description": "Financial Transactions",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FinancialTransactions"
            }
          }
        }
      },
      "FinancialTransactions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CreateDate": {
            "type": "string",
            "format": "date-time"
          },
          "FirstCardDigits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "ARN": {
            "type": "string",
            "description": "ARN is Solek transaction Id, this is the original ARN and this transaction ARN",
            "nullable": true
          },
          "SapakNumber": {
            "type": "integer",
            "description": "The Sapak that will get the Money",
            "format": "int32"
          },
          "OrigTransactionAmount": {
            "type": "number",
            "description": "The Sapak that will get the Money",
            "format": "decimal"
          },
          "BankDepositesId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "BankDepositAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CreditCardTransactionsId": {
            "type": "integer",
            "format": "int64"
          },
          "ConcentrationNumber": {
            "type": "integer",
            "description": "מספר הפקדה / ריכוז",
            "format": "int32"
          },
          "DepositeCurrency": {
            "type": "integer",
            "description": "bank deposit currency"
          },
          "ActionCode": {
            "type": "integer",
            "description": "מספר הפקדה / ריכוז"
          },
          "CreditCardCurrency": {
            "type": "integer",
            "description": "CreditCard original transactions currency"
          },
          "DepositeAmount": {
            "type": "number",
            "description": "Amount for Bank Deposite",
            "format": "decimal"
          },
          "IfPct": {
            "type": "number",
            "description": "Interchange Fee in percentage",
            "format": "decimal"
          },
          "FeePerTrnAmt": {
            "type": "number",
            "description": "fee per transaction, in transaction currency",
            "format": "decimal"
          },
          "FixFeeAmtDepoCurr": {
            "type": "number",
            "description": "per transaction fix commission in Deposite currency",
            "format": "decimal"
          },
          "MngtFeePct": {
            "type": "number",
            "description": "clube management commission percentage",
            "format": "decimal"
          },
          "BrutoOrgCurAmt": {
            "type": "number",
            "description": "סכום העסקה או סכום התשלום הרלונטי מטבע עסקה",
            "format": "decimal"
          },
          "DiscOrigCurrAmt": {
            "type": "number",
            "description": "הנחת סולק היחסית לתשלום הרלונטי מטבע עסקה",
            "format": "decimal"
          },
          "ClDscOrgCurAmt": {
            "type": "number",
            "description": "הנחת מועדון היחסית לתשלום הרלונטי מטבע עסקה",
            "format": "decimal"
          },
          "DiscFreqShopAmt": {
            "type": "number",
            "description": "סכום הנחה תמורת נקודות/כוכבים",
            "format": "decimal"
          },
          "AftDiscAmtDepoCur": {
            "type": "number",
            "description": "Amount after discounts for calculation",
            "format": "decimal"
          },
          "IfAmtDepoCur": {
            "type": "number",
            "description": "fee in deposit currency",
            "format": "decimal"
          },
          "VatPrc": {
            "type": "number",
            "description": "VAT percentage for this transaction",
            "format": "decimal"
          },
          "VatIfNisDepoCur": {
            "type": "number",
            "description": "VAT in deposit currency",
            "format": "decimal"
          },
          "CurrencyOrIndexRate": {
            "type": "number",
            "description": "base rate of index or Currency rate used in this transaction",
            "format": "decimal"
          },
          "EffectiveCurrencyOrIndexRate": {
            "type": "number",
            "description": "base rate of index or Currency rate used in this transaction",
            "format": "decimal"
          },
          "EstimateDepositeDate": {
            "type": "string",
            "description": "Estimate Deposite Date",
            "format": "date-time",
            "nullable": true
          },
          "NoOfPmt": {
            "type": "integer",
            "description": "Estimate Deposite Date"
          },
          "PmtNo": {
            "type": "integer",
            "description": "this payment number "
          },
          "Brand": {
            "$ref": "#/components/schemas/Brand2"
          },
          "TxnType": {
            "description": "Txn type ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TXNType"
              }
            ]
          },
          "IndexLinkType": {
            "description": "linked transactions type",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LinkedTransactionsType"
              }
            ]
          },
          "PurchaseDate": {
            "type": "string",
            "description": "linked transactions type",
            "format": "date-time"
          },
          "UID": {
            "type": "string",
            "nullable": true
          },
          "Last4CardDigits": {
            "type": "integer",
            "nullable": true
          },
          "Last4CardDigitsStr": {
            "type": "string",
            "description": "String representation of Last4CardDigits. Prevents zeros from being omitted",
            "nullable": true
          },
          "SapakMutavNumber": {
            "type": "integer",
            "description": "Mutav number in Meaged style work, information only",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "TXNType": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Regular_1",
          "Advanced_2",
          "Immediate_3",
          "Credit_6",
          "DEBIT_7",
          "Payments_8",
          "IsraCredit_12",
          "LOADING_17",
          "Exchange_71",
          "ExchangePayments_78"
        ],
        "enum": [
          1,
          2,
          3,
          6,
          7,
          8,
          12,
          17,
          71,
          78
        ]
      },
      "LinkedTransactionsType": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "NotLink",
          "USD",
          "Index"
        ],
        "enum": [
          1,
          4,
          8
        ]
      },
      "FinancialTransactionsReq": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "Page",
          "Page_size"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "FromCreateDate": {
            "type": "string",
            "description": "Form Create Date DDMMYYYY",
            "nullable": true
          },
          "ToCreateDate": {
            "type": "string",
            "description": "To Create Date DDMMYYYY",
            "nullable": true
          },
          "AddDepositedTransaction": {
            "type": "boolean",
            "description": "Will return transaction that have bean depisited in the fron to dates",
            "nullable": true
          },
          "Page": {
            "type": "integer",
            "description": "page,  from 1",
            "format": "int32"
          },
          "BankDepositeId": {
            "type": "integer",
            "description": "BankDepositeId",
            "format": "int32"
          },
          "Page_size": {
            "type": "integer",
            "description": "page size, 10 - 2000",
            "format": "int32"
          }
        }
      },
      "BankDepositesResp": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "BankDeposites": {
            "type": "array",
            "description": "BankDeposites",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BankDeposites"
            }
          }
        }
      },
      "BankDeposites": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "uniq deposite id",
            "format": "int32"
          },
          "DepositeAt": {
            "type": "string",
            "description": "Deposite date",
            "format": "date-time"
          },
          "SapakNumber": {
            "type": "integer",
            "description": "Sapak Number",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Deposite amount",
            "format": "decimal"
          },
          "BankNumber": {
            "type": "integer",
            "description": "Israel bank Number",
            "format": "int32"
          },
          "BranchNumber": {
            "type": "integer",
            "description": "Israel Branch Number",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "integer",
            "description": "Israel Account number",
            "format": "int32"
          },
          "Currency": {
            "type": "integer",
            "description": "deposit currency",
            "format": "int32"
          }
        }
      },
      "BankDepositesReq": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "FromCreateDate",
          "ToCreateDate"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "FromCreateDate": {
            "type": "string",
            "description": "Form Create Date DDMMYYYY",
            "minLength": 1
          },
          "ToCreateDate": {
            "type": "string",
            "description": "To Create Date DDMMYYYY",
            "minLength": 1
          }
        }
      },
      "SlikaInvoicesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "if equel zero then success , else , a develper error see Description for more info ",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the ResponseCode",
            "maxLength": 250,
            "nullable": true
          },
          "TotalCount": {
            "type": "integer",
            "description": "Total count of documents",
            "format": "int32"
          },
          "Invoices": {
            "type": "array",
            "description": "Query result",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SlikaInvoicesResult"
            }
          }
        }
      },
      "SlikaInvoicesResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DocNumber": {
            "type": "integer",
            "description": "Document Number",
            "format": "int64"
          },
          "DocType": {
            "type": "integer",
            "description": "Document type. 1 = Tax invoice",
            "format": "int32"
          },
          "DocDate": {
            "type": "string",
            "description": "Date of the document",
            "format": "date-time"
          },
          "BrutoOrgCurAmt": {
            "type": "number",
            "description": "Original transaction amount",
            "format": "decimal"
          },
          "DiscOrigCurrAmt": {
            "type": "number",
            "description": "Club discounts",
            "format": "decimal"
          },
          "AftDiscNisAmt": {
            "type": "number",
            "description": "Transaction amount after club discounts",
            "format": "decimal"
          },
          "IfNisAmt": {
            "type": "number",
            "description": "Interchange fee amount",
            "format": "decimal"
          },
          "MngtFeeNis": {
            "type": "number",
            "description": "Club managment fee",
            "format": "decimal"
          },
          "VatIfNis": {
            "type": "number",
            "description": "Charged VAT",
            "format": "decimal"
          },
          "DepositAmount": {
            "type": "number",
            "description": "Deposit Amount",
            "format": "decimal"
          },
          "BusinessName": {
            "type": "string",
            "nullable": true
          },
          "BusinessRegistrationNumber": {
            "type": "string",
            "description": "Business Registration Number",
            "nullable": true
          },
          "City": {
            "type": "string",
            "nullable": true
          },
          "Address1": {
            "type": "string",
            "nullable": true
          },
          "Address2": {
            "type": "string",
            "nullable": true
          },
          "HouseNumber": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "nullable": true
          },
          "SapakNumber": {
            "type": "integer",
            "format": "int32"
          },
          "EmailRecipient": {
            "type": "string",
            "description": "Invoice email recipient",
            "nullable": true
          },
          "BankDeposits": {
            "type": "array",
            "description": "Bank Deposits",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BankDeposites"
            }
          }
        }
      },
      "SlikaInvoicesRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "FromCreateDate",
          "ToCreateDate"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "FromCreateDate": {
            "type": "string",
            "description": "Form Create Date DDMMYYYY",
            "minLength": 1
          },
          "ToCreateDate": {
            "type": "string",
            "description": "To Create Date DDMMYYYY",
            "minLength": 1
          }
        }
      },
      "PrepareDeviceResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "Response code: 0 - Success / Other values - Error (See Description for more info)",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description for ResponseCode",
            "nullable": true
          },
          "TPN": {
            "type": "string",
            "description": "TPN for TapOnPhone device",
            "nullable": true
          },
          "MerchantCode": {
            "type": "string",
            "description": "Merchant Code for TapOnPhone device",
            "nullable": true
          },
          "SapakMutavNumber": {
            "type": "string",
            "description": "Sapak Mutav Number of the sent Cardcom terminal number in the rquest",
            "nullable": true
          },
          "RavMutavTerminalNumber": {
            "type": "integer",
            "description": "Cardcom Rav Mutav terminal number of the sent Cardcom terminal number in the rquest",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "PrepareDeviceRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "TerminalNumber",
          "DeviceUUID"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "TerminalNumber": {
            "type": "integer",
            "description": "Terminal number at Cardcom",
            "format": "int32"
          },
          "DeviceUUID": {
            "type": "string",
            "description": "Mobile device UUID",
            "maxLength": 50,
            "minLength": 1
          },
          "DeviceManufacturer": {
            "type": "string",
            "description": "Mobile device manufacturer",
            "maxLength": 50,
            "nullable": true
          },
          "DeviceModel": {
            "type": "string",
            "description": "Mobile device model",
            "maxLength": 50,
            "nullable": true
          }
        }
      },
      "ProcessTransactionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "integer",
            "description": "Response code: 0 - Success / Other values - Error (See Description for more info)",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description for ResponseCode",
            "nullable": true
          },
          "DealNumber": {
            "type": "integer",
            "description": "Deal number in Cardcom systems",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "ProcessTransactionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "TerminalNumber",
          "DeviceUUID",
          "TransactionInfo"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "TerminalNumber": {
            "type": "integer",
            "description": "Terminal number at Cardcom",
            "format": "int32"
          },
          "RavMutavTerminalNumber": {
            "type": "integer",
            "description": "The value returned in the PrepareDevice response",
            "format": "int32",
            "nullable": true
          },
          "DeviceUUID": {
            "type": "string",
            "description": "Mobile device UUID",
            "maxLength": 50,
            "minLength": 1
          },
          "TransactionInfo": {
            "description": "SDK transaction info",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SdkTransactionInfo"
              }
            ]
          }
        }
      },
      "SdkTransactionInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Amount",
          "Type",
          "CreditType",
          "NumberOfPayments",
          "CustomerName",
          "ResponseCode",
          "Message",
          "Status",
          "TransactionId",
          "ReturnCode",
          "ReturnMessage",
          "CardNumber",
          "CardExpireDateMMYY",
          "CardBrandCode",
          "CardIssuerCode",
          "CardFinancerCode",
          "Token",
          "ApprovalNumber",
          "ResultRecord",
          "UID"
        ],
        "properties": {
          "Amount": {
            "type": "string",
            "description": "Tap transaction total sum",
            "minLength": 1
          },
          "Type": {
            "type": "integer",
            "description": "Tap transaction type: 1 - Charge / 51 - Refund",
            "format": "int32"
          },
          "CreditType": {
            "type": "integer",
            "description": "Tap transaction credit type: 1 - Single payment / 6 - Credit payments / 8 - Regular payments",
            "format": "int32"
          },
          "NumberOfPayments": {
            "type": "integer",
            "description": "Tap transaction number of payments",
            "format": "int32"
          },
          "CustomerName": {
            "type": "string",
            "description": "Tap transaction customer name",
            "maxLength": 50,
            "minLength": 1
          },
          "CustomerEmail": {
            "type": "string",
            "description": "Tap transaction customer name email",
            "maxLength": 150,
            "nullable": true
          },
          "CustomerPhoneNumber": {
            "type": "string",
            "description": "Tap transaction customer phone number",
            "maxLength": 50,
            "nullable": true
          },
          "CustomerIdNumber": {
            "type": "string",
            "description": "Tap transaction customer id number",
            "maxLength": 50,
            "nullable": true
          },
          "ResponseCode": {
            "type": "integer",
            "description": "Tap transaction response code",
            "format": "int32"
          },
          "Message": {
            "type": "string",
            "description": "Tap transaction message",
            "minLength": 1
          },
          "Status": {
            "type": "string",
            "description": "Tap transaction status",
            "minLength": 1
          },
          "TransactionId": {
            "type": "integer",
            "description": "Tap transaction id",
            "format": "int32"
          },
          "ReturnCode": {
            "type": "integer",
            "description": "Tap transaction return code",
            "format": "int32"
          },
          "ReturnMessage": {
            "type": "string",
            "description": "Tap transaction return message",
            "minLength": 1
          },
          "CardNumber": {
            "type": "string",
            "description": "Tap transaction card number",
            "minLength": 1
          },
          "CardExpireDateMMYY": {
            "type": "string",
            "description": "Tap transaction card expire month and year in MM/YY format",
            "minLength": 1
          },
          "CardBrandCode": {
            "type": "integer",
            "description": "Tap transaction card brand code",
            "format": "int32"
          },
          "CardIssuerCode": {
            "type": "integer",
            "description": "Tap transaction card issuer code",
            "format": "int32"
          },
          "CardFinancerCode": {
            "type": "integer",
            "description": "Tap transaction card financer code",
            "format": "int32"
          },
          "Token": {
            "type": "string",
            "description": "Tap transaction card token",
            "minLength": 1
          },
          "ApprovalNumber": {
            "type": "string",
            "description": "Tap transaction approval number",
            "minLength": 1
          },
          "ResultRecord": {
            "type": "string",
            "description": "Tap transaction result record",
            "minLength": 1
          },
          "UID": {
            "type": "string",
            "description": "Tap transaction UID",
            "minLength": 1
          }
        }
      },
      "GetTransactionsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "TerminalNumber",
          "FromDate",
          "ToDate"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "TerminalNumber": {
            "type": "integer",
            "description": "Terminal number at Cardcom",
            "format": "int32"
          },
          "FromDate": {
            "type": "string",
            "description": "Date for a search from a specific date",
            "format": "date-time",
            "minLength": 1
          },
          "ToDate": {
            "type": "string",
            "description": "Date for searching up to a specific date",
            "format": "date-time",
            "minLength": 1
          }
        }
      },
      "GetDevicesRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ApiName",
          "ApiPassword",
          "TerminalNumber"
        ],
        "properties": {
          "ApiName": {
            "type": "string",
            "description": "Api Name for authentication",
            "minLength": 1
          },
          "ApiPassword": {
            "type": "string",
            "description": "Api password for authentication",
            "minLength": 1
          },
          "TerminalNumber": {
            "type": "integer",
            "description": "Terminal number at Cardcom",
            "format": "int32"
          }
        }
      }
    }
  }
}